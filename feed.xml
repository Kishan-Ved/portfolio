<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.0">Jekyll</generator><link href="https://kishanved.tech//feed.xml" rel="self" type="application/atom+xml"/><link href="https://kishanved.tech//" rel="alternate" type="text/html" hreflang="en"/><updated>2025-01-28T16:09:42+00:00</updated><id>https://kishanved.tech//feed.xml</id><title type="html">Kishan Ved</title><subtitle>Kishan Ved&apos;s portfolio website. </subtitle><entry><title type="html">My Google Summer of Code Journey</title><link href="https://kishanved.tech//blog/my_gsoc_journey" rel="alternate" type="text/html" title="My Google Summer of Code Journey"/><published>2024-08-10T00:00:00+00:00</published><updated>2024-08-10T00:00:00+00:00</updated><id>https://kishanved.tech//blog/my_gsoc_journey</id><content type="html" xml:base="https://kishanved.tech//blog/my_gsoc_journey"><![CDATA[<p>This blog post summarizes my open source experience, right from my very first open source contribution to getting selected for GSoC and completing my Google Summer of Code project!</p> <p><img src="../assets/img/GSoC_Logo.png" alt="alt text" width="100%"/></p> <h1 id="about-me">About Me</h1> <p>I am <b><a href="https://github.com/Kishan-Ved">Kishan Ved</a></b>, an undergraduate student at the Indian Institute of Technology Gandhinagar (IIT Gandhinagar), India, in the department of Computer Science and Engineering. I spent the summer after my second year doing my Google Summer of Code 2024 project with the NumFOCUS organization (which serves as an umbrella organization for open source projects), which had Open Science Labs as a sub organization. The project I worked on is: <b><a href="https://github.com/codezonediitj/pydatastructs">PyDataStructs</a></b>.</p> <h1 id="about-pydatastructs">About PyDataStructs</h1> <p><b><a href="https://github.com/codezonediitj/pydatastructs">PyDataStructs</a></b> aims to be a Python package for various data structures in computer science. It also contains several algorithms including their parallel implementations. Everything is just a few calls away, and users don’t need to write any code from scratch. The APIs provided are consistent with each other, clean and easy to use. All implementations are well tested, 99% lines of code have already been tested by developers. PyDataStructs is the first well-designed library/package which covers most of the data structures and algorithms, with different backends like Python and C++.</p> <h1 id="my-first-contribution-to-open-source">My first contribution to open source</h1> <p>I began contributing to open source in December 2023, when I connected to a senior student at my university who had also done GSoC in 2023, with PyDataStructs. I was interested in the project that she did and hence I started exploring the codebase.</p> <h2 id="finding-a-good-first-issue">Finding a good first issue</h2> <p>I went to the issues tab on the repository’s github page and searched for good first issues. I noticed an issue that seemed doable: <b><a href="https://github.com/codezonediitj/pydatastructs/issues/545">Implement Introsort</a></b>. This involved implementing the sorting algorithm: Introsort in the Python backend. I had learned this as a part of my academic cousework, and hence, I was able to code this.</p> <h2 id="my-first-pull-request">My first Pull Request</h2> <p>I started reading the README file and set up the repository locally and created the conda environment. Then I got to work. In a day, I was able to successfully create a PR (pull request) and open it on GitHub: <b><a href="https://github.com/codezonediitj/pydatastructs/pull/549">Implemented Introsort</a></b>. This PR was reviewed and changes were requested. Once I had done all of them and all the CI checks passed, it was merged. And that’s my first open souce contribution!</p> <h1 id="pre-gsoc-phase">Pre-GSoC Phase</h1> <p>Next, I connected to the maintainer, <b><a href="https://github.com/czgdp1807">Gagandeep Singh</a></b>, and expressed my interest for contributing. He suggested that I contribute to more organizations, like: <b><a href="https://github.com/lfortran/lfortran">LFortran</a></b> and <b><a href="https://github.com/lcompilers/lpython">LPython</a></b> to maximize my chances for GSoC. These organizations also had Gagandeep Sir as the core maintainer and developer.</p> <h2 id="the-amazing-open-source-community">The amazing open source community</h2> <p>I found the open source community amazing, everyone was ready to help me with every doubt I had, patiently guide me with differnt git commands to resolve conflicts and review my PRs and give valueable advice. I made new friends, who were almost of the same age as me, who had been contributing since quite a while. They made things easier for me and helped me contribute.</p> <h2 id="more-open-source-contributions">More open source contributions</h2> <p>I spent the next 3 months contributing to these organizations, and I had 10 merged PRs in the LFortran repository and 5 merged PRs in the LPython repository. Here’s a link to these:</p> <ul> <li> <p><b><a href="https://github.com/lfortran/lfortran/pulls?q=is%3Apr+author%3AKishan-Ved+is%3Amerged">LFortran contributions</a></b></p> </li> <li> <p><b><a href="https://github.com/lcompilers/lpython/pulls?q=is%3Apr+author%3AKishan-Ved+is%3Amerged">LPython contributions</a></b></p> </li> </ul> <p>These made me well versed with various git commands, the skill of handling a large and dynamic codebase and communicating effectively with the community to incorporate suggestions and solve issues.</p> <h2 id="drafting-my-gsoc-proposal">Drafting my GSoC proposal</h2> <p>Next, it was time to submit proposals for GSoC projects. By then, I had been contributing to open source for nearly 3 months. I requested a meeting with Gagandeep Sir to help me decide my proposal. He kindly agreed and we set up an online meeting, where we discussed potential GSoC ideas and the timeline that was best suited for me.</p> <p>I submitted 2 proposals, to LPython (Python Software Foundation) and PyDataStructs (NumFOCUS):</p> <ul> <li> <p><b><a href="https://drive.google.com/file/d/1khpreH4pVJSj26VGJOf2v_XDCrOlo8qP/view?usp=sharing">NumFOCUS - Open Science Labs: PyDataStructs: Add C++ Backend for all trees</a></b></p> </li> <li> <p><b><a href="https://drive.google.com/file/d/1to69uW9rb9vAE6pJCooamQo-Q1f_BYBt/view?usp=sharing">Python Software Foundation - LPython: Implement modules from the Python Standard Library</a></b></p> </li> </ul> <p>The proposals should have personal information, details about previous open source contributions made to the organization’s repository, and detailed information about the project that you wish to take up, with a structured plan about your goals. In addition to this, it must contain an expected timeline that you will follow. It’s a good practice to set a large number of small goals and plan tasks before starting the project.</p> <h2 id="continuing-open-source-contributions">Continuing open source contributions</h2> <p>It’s a good practice to remain active in the organizations by contributing even after submitting GSoC proposals, this makes the developers believe that you are genuinely interested in the project and enthusiastic to contribute. This amplifies chances for getting selected for Google Summer of Code!</p> <h1 id="gsoc-phase">GSoC Phase</h1> <p>I got my acceptance letter at 11:32 pm IST on May 1, 2024. It was 2 minutes past the result declaration time and I was at the edge of my seat. I was overjoyed to get the mail saying I was accepted as a Google Summer of Code contributor for NumFOCUS! Here’s my project: <strong><a href="https://summerofcode.withgoogle.com/programs/2024/projects/2nrxEFTg">Open Science Labs: PyDataStructs: Add a C++ Backend for tree data structures and their algorithms</a></strong></p> <h2 id="my-gsoc-project-goals">My GSoC project goals</h2> <p>My project involved adding a C++ backend for all tree data structures in <strong><a href="https://github.com/codezonediitj/pydatastructs">PyDataStructs</a></strong>, a Python package for advanced data structures and algorithms. The user has an option to select either the Python backend or the C++ backend.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tree</span> <span class="o">=</span> <span class="nc">RedBlackTree</span><span class="p">(</span><span class="n">backend</span><span class="o">=</span><span class="n">Backend</span><span class="p">.</span><span class="n">CPP</span><span class="p">)</span>
</code></pre></div></div> <p>For any data structure, the Python backend is developed first, and once completely tested and ready, its C++ backend is developed. Both the backends share full functionality and are completely compatible. The C++ backend is extremely fast, it executes codes 8-10 times faster. This enhances the computation speed, making it extremely valuable for scientific computing and high-performance applications.</p> <h2 id="the-community-bonding-period">The community bonding period</h2> <p>I’ll be honest, it was difficult at the start. I found the project a little more difficult than I had anticipated, and realized that it demanded a little more that my current skillset. My mentor, Gagandeep Sir, adviced me to read the documentation and first learn about Python-C API, which was something totally new for me. I spent the first week doing this, and I could barely write any code. However, I soon realized the importance of reading the documentation and how smoothly things went following that. Within a week, I became well versed with all the new technology and started coding up my first PR.</p> <h2 id="coding-phase">Coding phase</h2> <p>I started working from the community bonding period itself, and this gave me a good headstart and allowed me to complete the project in 12 weeks. Here’s an outline of all the work I did:</p> <h3 id="pre-gsoc-work">Pre GSoC Work</h3> <table> <thead> <tr> <th>PR Description</th> <th>Contribution</th> </tr> </thead> <tbody> <tr> <td><a href="https://github.com/codezonediitj/pydatastructs/pull/549">PR: Added Introsort algorithm</a></td> <td><strong><span style="color: green;">+127</span></strong></td> </tr> <tr> <td><a href="https://github.com/codezonediitj/pydatastructs/pull/553">PR: Fixed version related bugs</a></td> <td><strong><span style="color: green;">+4</span></strong></td> </tr> </tbody> </table> <h3 id="community-bonding-period">Community bonding period</h3> <table> <thead> <tr> <th>PR Description</th> <th>Contribution</th> </tr> </thead> <tbody> <tr> <td><a href="https://github.com/codezonediitj/pydatastructs/pull/556">PR: C++ backend for Node, TreeNode, ArrayForTrees, BinaryTree and BinarySearchTree and all tree traversals implemented</a></td> <td><strong><span style="color: green;">+1,936</span></strong></td> </tr> </tbody> </table> <h3 id="coding-phase-1">Coding Phase 1</h3> <table> <thead> <tr> <th>PR Description</th> <th>Contribution</th> </tr> </thead> <tbody> <tr> <td><a href="https://github.com/codezonediitj/pydatastructs/pull/559">PR: C++ backend for Self Balancing Binary Tree</a></td> <td><strong><span style="color: green;">+328</span></strong></td> </tr> <tr> <td><a href="https://github.com/codezonediitj/pydatastructs/pull/560">PR: C++ backend for Red Black Trees</a></td> <td><strong><span style="color: green;">+748</span></strong></td> </tr> <tr> <td><a href="https://github.com/codezonediitj/pydatastructs/pull/561">PR: C++ backend for Binary Indexed Trees</a></td> <td><strong><span style="color: green;">+179</span></strong></td> </tr> <tr> <td><a href="https://github.com/codezonediitj/pydatastructs/pull/562">PR: C++ backend for Splay Trees</a></td> <td><strong><span style="color: green;">+423</span></strong></td> </tr> </tbody> </table> <h3 id="coding-phase-2">Coding Phase 2</h3> <table> <thead> <tr> <th>PR Description</th> <th>Contribution</th> </tr> </thead> <tbody> <tr> <td><a href="https://github.com/codezonediitj/pydatastructs/pull/564">PR: C++ backend for AVL Trees</a></td> <td><strong><span style="color: green;">+488</span></strong></td> </tr> <tr> <td><a href="https://github.com/codezonediitj/pydatastructs/pull/567">PR: C++ backend for Cartesian Trees</a></td> <td><strong><span style="color: green;">+254</span></strong></td> </tr> <tr> <td><a href="https://github.com/codezonediitj/pydatastructs/pull/568">PR: C++ backend for Treap</a></td> <td><strong><span style="color: green;">+150</span></strong></td> </tr> <tr> <td><a href="https://github.com/codezonediitj/pydatastructs/pull/569">PR: C++ backend for all trees in <code class="language-plaintext highlighter-rouge">binary_trees.py</code> file complete</a></td> <td><strong><span style="color: green;">+72</span></strong></td> </tr> <tr> <td><a href="https://github.com/codezonediitj/pydatastructs/pull/570">PR: Updated Documentation</a></td> <td><strong><span style="color: green;">+12</span></strong></td> </tr> </tbody> </table> <hr/> <h2 id="contribution-stats">Contribution Stats:</h2> <p>Lines added: <strong><span style="color: green;">+4,721</span></strong> (#2 contributor in terms of lines added)</p> <p>Commits made: 12</p> <p>Total merged Pull Requests : 12</p> <p>Here’s a complete list of all my <strong><a href="https://github.com/codezonediitj/pydatastructs/pulls?q=is%3Apr+is%3Amerged+author%3AKishan-Ved">merged PRs</a></strong></p> <h2 id="speed-results">Speed results</h2> <p>Time taken for methods of Binary Search Tree class to execute in different backends:</p> <p align="center"> <img src="https://gist.github.com/user-attachments/assets/2b8fdf65-75d4-4636-aba1-525289c76615" alt="Centered Image"/> </p> <p>The picture clearly indicates the utility of the C++ backend. It makes code execution much faster. This is helpful for high-performance computing.</p> <h2 id="weekly-reports">Weekly reports</h2> <p>My Google Summer of Code blogs are available on my website: <strong><a href="https://kishanved.tech/blog/">https://kishanved.tech/blog/</a></strong></p> <h2 id="final-report">Final Report</h2> <p>My final report for Google Summer of Code 2024 is available here: <strong><a href="https://gist.github.com/Kishan-Ved/ebe0a971220d67517ae815e4f92d2459">Google Summer of Code 2024 Report</a></strong></p> <h2 id="future-work">Future work</h2> <p>My project is complete, the C++ backend for all trees is fully functional. Some (non-critical) issues have been opened, these need to be addressed. For upcoming plans (and major goals), refer <strong><a href="https://github.com/codezonediitj/pydatastructs/wiki/Google-Summer-of-Code-Project-Ideas">PyDataStructs Wiki</a></strong> on GitHub.</p> <h2 id="learnings">Learnings</h2> <p><strong>Tech</strong>: Mastered the art of linking a Python code to a C++ backend by using the Python-C API to improve speeds greatly. Polished my C++ and Python coding skills.</p> <p><strong>GitHub</strong>: Learned various new commands, resolution of conflicts and merging branches for collaborative work.</p> <p><strong>Perseverance</strong>: GSoC taught me to read the documentation, be calm and perseverant. It’s difficult at the start but smoother ahead!</p> <hr/> <p>And that’s my entire open source story, from my first contribution to getting selected for Google Summer of Code! I hope this helps you to navigate through the amazing world of open source software!</p> <p>Thanks to my mentor <strong><a href="https://github.com/czgdp1807">Gagandeep Singh</a></strong> for his support and guidance. Thanks to <strong><a href="https://github.com/xmnlab">Ivan Ogasawara</a></strong> and the team at Open Science Labs and NumFOCUS.</p>]]></content><author><name></name></author><category term="GSoC_Journey"/><category term="GSoC&apos;24"/><summary type="html"><![CDATA[My entire open source journey, starting from my first contribution to GSoC!]]></summary></entry><entry><title type="html">GSoC’24 Week 12</title><link href="https://kishanved.tech//blog/week12" rel="alternate" type="text/html" title="GSoC’24 Week 12"/><published>2024-07-28T00:00:00+00:00</published><updated>2024-07-28T00:00:00+00:00</updated><id>https://kishanved.tech//blog/week12</id><content type="html" xml:base="https://kishanved.tech//blog/week12"><![CDATA[<h5 id="july-22---july-28"><code class="language-plaintext highlighter-rouge">[July 22 - July 28]</code></h5> <h2 id="completing-google-summer-of-code-2024">Completing Google Summer of Code 2024!</h2> <hr/> <h3 id="coding-info"><ins>Coding info</ins></h3> <p>This week, I wrapped up all my pending work, and I have successfully completed my Google Summer of Code 2024 project. I have fully implemented the C++ backend for all tree data structures present in the <code class="language-plaintext highlighter-rouge">binary_trees.py</code> file.</p> <p>I made a PR involving Final additions to complete C++ backend for all trees in binary_trees.py file. Added getter functions to access root_idx (index of the root) for all tree types.</p> <p>I also made my final GSoC 2024 report: <strong><a href="https://gist.github.com/Kishan-Ved/ebe0a971220d67517ae815e4f92d2459">GitHub Gist</a></strong></p> <h3 id="relevant-prs"><ins>Relevant PRs:</ins></h3> <p>PR for C++ backend for all trees in binary_trees.py file complete (merged): <a href="https://github.com/codezonediitj/pydatastructs/pull/569">#569</a></p> <p>For next week… <strong>Hey wait, I finished the project! Yay!</strong></p> <h3 id="learningsdifficulties"><ins>Learnings/Difficulties</ins></h3> <p>GSoC has been an amazing experience, I’ve learned so much and enjoyed my summer holiday. It was great being a part of this wonderful program and I am truly happy with how well I navigated through the project and completed it successfully.</p> <p><br/> Thanks to my mentor, <a href="https://github.com/czgdp1807">Gagandeep Singh</a>, for being an amazing mentor. Thanks to <a href="https://github.com/xmnlab">Ivan Ogasawara</a> and the team at Open Science Labs and NumFOCUS.</p> <p>See you again with some more interesting stuff that I’ll do! (Hopefully another GSoC next year!)</p> <hr/> <p>Happily ending GSoC 2024,</p> <p>Kishan Ved</p>]]></content><author><name></name></author><category term="Weekly_Blogs"/><category term="GSoC&apos;24"/><summary type="html"><![CDATA[Successfully completing up Google Summer of Code 2024!]]></summary></entry><entry><title type="html">GSoC ‘24 Final Report</title><link href="https://kishanved.tech//blog/gsoc_report" rel="alternate" type="text/html" title="GSoC ‘24 Final Report"/><published>2024-07-28T00:00:00+00:00</published><updated>2024-07-28T00:00:00+00:00</updated><id>https://kishanved.tech//blog/gsoc_report</id><content type="html" xml:base="https://kishanved.tech//blog/gsoc_report"><![CDATA[<h1 id="google-summer-of-code-2024-report">Google Summer of Code 2024 Report</h1> <p>This report summarizes the work done by me (<strong><a href="https://github.com/Kishan-Ved">Kishan Ved</a></strong>) for <strong>Google Summer of Code 2024</strong> with the <strong>NumFOCUS</strong> organization, on the project <strong><a href="https://summerofcode.withgoogle.com/programs/2024/projects/2nrxEFTg">Open Science Labs: PyDataStructs: Add a C++ Backend for tree data structures and their algorithms</a></strong>. Weekly reports are available here: <a href="https://kishanved.tech/blog/">GSoC BLogs</a></p> <p>This report is available as a GitHub Gist, it contains more revisions. <a href="https://gist.github.com/Kishan-Ved/ebe0a971220d67517ae815e4f92d2459">View here.</a></p> <p><img src="../assets/img/GSoC_NumFOCUS.png" alt="alt text" width="100%"/></p> <h2 id="about-me">About me</h2> <p>I am Kishan Ved, an undergraduate student at the Indian Institute of Technology Gandhinagar (IIT Gandhinagar), India, in the department of Computer Science and Engineering.</p> <h2 id="about-pydatastructs">About PyDataStructs</h2> <p><a href="https://github.com/codezonediitj/pydatastructs">PyDataStructs</a> aims to be a Python package for various data structures in computer science. We are also working on the development of algorithms including their parallel implementations. To the best of our knowledge, PyDataStructs is the first well-designed library/package which has covered most of the data structures and algorithms.</p> <p>Features:</p> <ul> <li> <p>A single package for all your data structures and algorithms - We have and are implementing many popular and useful data structures and algorithms.</p> </li> <li> <p>Consistent and Clean Interface - The APIs we have provided are consistent with each other, clean and easy to use. We make sure of that before adding any new data structure or algorithm.</p> </li> <li> <p>Well Tested - We thoroughly test our code before making any new addition to PyDataStructs. 99 percent lines of our code have already been tested by us.</p> </li> </ul> <p>So, you can easily rely on PyDataStructs for any data structure or algorithm you want to use without worrying about implementing it from scratch. Everything is just a few calls away.</p> <h2 id="gsoc-project-goals">GSoC Project Goals</h2> <p>My project involved adding a C++ backend for all tree data structures in <a href="https://github.com/codezonediitj/pydatastructs">PyDataStructs</a>, a Python package for advanced data structures and algorithms. The user has an option to select either the Python backend or the C++ backend.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tree</span> <span class="o">=</span> <span class="nc">RedBlackTree</span><span class="p">(</span><span class="n">backend</span><span class="o">=</span><span class="n">Backend</span><span class="p">.</span><span class="n">CPP</span><span class="p">)</span>
</code></pre></div></div> <p>For any data structure, the Python backend is developed first, and once completely tested and ready, its C++ backend is developed. Both the backends share full functionality and are completely compatible. The C++ backend is extremely fast, it executes codes 8-10 times faster. This enhances the computation speed, making it extremely valuable for scientific computing and high-performance applications.</p> <h2 id="project-outline">Project Outline</h2> <p>I started working from the community bonding period itself, and this gave me a good headstart and allowed me to complete the project in 12 weeks. Here’s an outline of all the work I did:</p> <h3 id="pre-gsoc-work">Pre GSoC Work</h3> <table> <thead> <tr> <th>PR Description</th> <th>Contribution</th> </tr> </thead> <tbody> <tr> <td><a href="https://github.com/codezonediitj/pydatastructs/pull/549">PR: Added Introsort algorithm</a></td> <td><strong><span style="color: green;">+127</span></strong></td> </tr> <tr> <td><a href="https://github.com/codezonediitj/pydatastructs/pull/553">PR: Fixed version related bugs</a></td> <td><strong><span style="color: green;">+4</span></strong></td> </tr> </tbody> </table> <h3 id="community-bonding-period">Community bonding period</h3> <table> <thead> <tr> <th>PR Description</th> <th>Contribution</th> </tr> </thead> <tbody> <tr> <td><a href="https://github.com/codezonediitj/pydatastructs/pull/556">PR: C++ backend for Node, TreeNode, ArrayForTrees, BinaryTree and BinarySearchTree and all tree traversals implemented</a></td> <td><strong><span style="color: green;">+1,936</span></strong></td> </tr> </tbody> </table> <h3 id="coding-phase-1">Coding Phase 1</h3> <table> <thead> <tr> <th>PR Description</th> <th>Contribution</th> </tr> </thead> <tbody> <tr> <td><a href="https://github.com/codezonediitj/pydatastructs/pull/559">PR: C++ backend for Self Balancing Binary Tree</a></td> <td><strong><span style="color: green;">+328</span></strong></td> </tr> <tr> <td><a href="https://github.com/codezonediitj/pydatastructs/pull/560">PR: C++ backend for Red Black Trees</a></td> <td><strong><span style="color: green;">+748</span></strong></td> </tr> <tr> <td><a href="https://github.com/codezonediitj/pydatastructs/pull/561">PR: C++ backend for Binary Indexed Trees</a></td> <td><strong><span style="color: green;">+179</span></strong></td> </tr> <tr> <td><a href="https://github.com/codezonediitj/pydatastructs/pull/562">PR: C++ backend for Splay Trees</a></td> <td><strong><span style="color: green;">+423</span></strong></td> </tr> </tbody> </table> <h3 id="coding-phase-2">Coding Phase 2</h3> <table> <thead> <tr> <th>PR Description</th> <th>Contribution</th> </tr> </thead> <tbody> <tr> <td><a href="https://github.com/codezonediitj/pydatastructs/pull/564">PR: C++ backend for AVL Trees</a></td> <td><strong><span style="color: green;">+488</span></strong></td> </tr> <tr> <td><a href="https://github.com/codezonediitj/pydatastructs/pull/567">PR: C++ backend for Cartesian Trees</a></td> <td><strong><span style="color: green;">+254</span></strong></td> </tr> <tr> <td><a href="https://github.com/codezonediitj/pydatastructs/pull/568">PR: C++ backend for Treap</a></td> <td><strong><span style="color: green;">+150</span></strong></td> </tr> <tr> <td><a href="https://github.com/codezonediitj/pydatastructs/pull/569">PR: C++ backend for all trees in <code class="language-plaintext highlighter-rouge">binary_trees.py</code> file complete</a></td> <td><strong><span style="color: green;">+72</span></strong></td> </tr> <tr> <td><a href="https://github.com/codezonediitj/pydatastructs/pull/570">PR: Updated Documentation</a></td> <td><strong><span style="color: green;">+12</span></strong></td> </tr> </tbody> </table> <hr/> <h2 id="contribution-stats">Contribution Stats:</h2> <p>Lines added: <strong><span style="color: green;">+4,709</span></strong> (#2 contributor in terms of lines added)</p> <p>Commits made: 11</p> <p>Total merged Pull Requests : 11</p> <p>Here’s a complete list of all my <a href="https://github.com/codezonediitj/pydatastructs/pulls?q=is%3Apr+is%3Amerged+author%3AKishan-Ved">merged PRs</a></p> <h2 id="speed-results">Speed results</h2> <p>Time taken for methods of Binary Search Tree class to execute in different backends:</p> <p align="center"> <img src="https://gist.github.com/user-attachments/assets/2b8fdf65-75d4-4636-aba1-525289c76615" alt="Centered Image"/> </p> <h2 id="weekly-reports">Weekly reports</h2> <p>My Google Summer of Code blogs are available on my website: <a href="https://kishanved.tech/blog/">https://kishanved.tech/blog/</a></p> <h2 id="future-work">Future work</h2> <p>Some issues have been opened, these can be addressed. Refer PyDataStructs Wiki on GitHub for upcoming plans.</p> <h2 id="learnings">Learnings</h2> <p><strong>Tech</strong>: Mastered the art of linking a Python code to a C++ backend by using the Python-C API to improve speeds greatly. Polished my C++ and Python coding skills.</p> <p><strong>GitHub</strong>: Learned various new commands, resolution of conflicts and merging branches for collaborative work.</p> <p><strong>Perseverance</strong>: GSoC taught me to read the documentation, be calm and perseverant. It’s difficult at the start but smoother ahead!</p> <hr/> <p>Thanks to my mentor <a href="https://github.com/czgdp1807">Gagandeep Singh</a> for his support and guidance. Thanks to <a href="https://github.com/xmnlab">Ivan Ogasawara</a> and the team at Open Science Labs and NumFOCUS.</p>]]></content><author><name></name></author><category term="GSoC_Report"/><category term="GSoC&apos;24"/><summary type="html"><![CDATA[My Google Summer of Code 2024 Report]]></summary></entry><entry><title type="html">GSoC’24 Week 11</title><link href="https://kishanved.tech//blog/week11" rel="alternate" type="text/html" title="GSoC’24 Week 11"/><published>2024-07-21T00:00:00+00:00</published><updated>2024-07-21T00:00:00+00:00</updated><id>https://kishanved.tech//blog/week11</id><content type="html" xml:base="https://kishanved.tech//blog/week11"><![CDATA[<h5 id="july-15---july-21"><code class="language-plaintext highlighter-rouge">[July 15 - July 21]</code></h5> <h2 id="c-backend-for-treap-done">C++ backend for Treap done!</h2> <hr/> <h3 id="coding-info"><ins>Coding info</ins></h3> <p>This week, I finished coding up the <code class="language-plaintext highlighter-rouge">C++ backend for Treap</code>. The following methods were implemented:</p> <ul> <li><code class="language-plaintext highlighter-rouge">Treap___new__()</code></li> <li><code class="language-plaintext highlighter-rouge">Treap___str__()</code></li> <li><code class="language-plaintext highlighter-rouge">Treap_search()</code></li> <li><code class="language-plaintext highlighter-rouge">Treap_insert()</code></li> <li><code class="language-plaintext highlighter-rouge">Treap_delete()</code></li> </ul> <h3 id="relevant-prs"><ins>Relevant PRs:</ins></h3> <p>PR for C++ backend for Treap (merged): <a href="https://github.com/codezonediitj/pydatastructs/pull/568">#568</a></p> <p>In the following week, I will add some additional functionality (like a few getter functions to access values and linking base class functions to derived classes) and this will complete the entire C++ backend for all trees present in <code class="language-plaintext highlighter-rouge">binary_trees.py</code> file.</p> <h3 id="learningsdifficulties"><ins>Learnings/Difficulties</ins></h3> <p>All going great!</p> <p><br/> Thanks to my mentor, <a href="https://github.com/czgdp1807">Gagandeep Singh</a>, for his support throughout.</p> <p>See you again after amazing 7 days! 😊</p>]]></content><author><name></name></author><category term="Weekly_Blogs"/><category term="GSoC&apos;24"/><summary type="html"><![CDATA[C++ backend for Treap done and merged!]]></summary></entry><entry><title type="html">GSoC’24 Week 10</title><link href="https://kishanved.tech//blog/week10" rel="alternate" type="text/html" title="GSoC’24 Week 10"/><published>2024-07-14T00:00:00+00:00</published><updated>2024-07-14T00:00:00+00:00</updated><id>https://kishanved.tech//blog/week10</id><content type="html" xml:base="https://kishanved.tech//blog/week10"><![CDATA[<h5 id="july-08---july-14"><code class="language-plaintext highlighter-rouge">[July 08 - July 14]</code></h5> <h2 id="first-gsoc-evaluation-passed-successfully">First GSoC Evaluation Passed Successfully!</h2> <hr/> <h3 id="coding-info"><ins>Coding info</ins></h3> <p>This week, I finished coding up the <code class="language-plaintext highlighter-rouge">C++ backend for Cartesian Trees</code>. The following methods were implemented:</p> <ul> <li><code class="language-plaintext highlighter-rouge">CartesianTree___new__()</code></li> <li><code class="language-plaintext highlighter-rouge">CartesianTree___str__()</code></li> <li><code class="language-plaintext highlighter-rouge">CartesianTree_search()</code></li> <li><code class="language-plaintext highlighter-rouge">CartesianTree__bubble_up()</code></li> <li><code class="language-plaintext highlighter-rouge">CartesianTree__trickle_down()</code></li> <li><code class="language-plaintext highlighter-rouge">CartesianTree_insert()</code></li> <li><code class="language-plaintext highlighter-rouge">CartesianTree_delete()</code></li> <li><code class="language-plaintext highlighter-rouge">CartesianTree_root_idx()</code> : A getter function.</li> </ul> <p>Comprehensive tests were added and I ensured that all of them passed.</p> <h3 id="relevant-prs"><ins>Relevant PRs:</ins></h3> <p>PR for C++ backend for Cartesian Trees (merged): <a href="https://github.com/codezonediitj/pydatastructs/pull/567">#567</a></p> <p>In the following week, I will implement Treap in the C++ backend.</p> <h3 id="learningsdifficulties"><ins>Learnings/Difficulties</ins></h3> <p>This week, I learned about getter and setter functions and their implementation using the Python-C API. I created a getter function <code class="language-plaintext highlighter-rouge">CartesianTree_root_idx()</code> that accesses a member from a class much above in hierarchy (parent-&gt;parent-&gt;parent class).</p> <p><br/> Thanks to my mentor, <a href="https://github.com/czgdp1807">Gagandeep Singh</a>, for his support throughout.</p> <p>See you again after an awesome week! 😊</p>]]></content><author><name></name></author><category term="Weekly_Blogs"/><category term="GSoC&apos;24"/><summary type="html"><![CDATA[C++ backend for Cartesian Trees done for week 10 of GSoC!]]></summary></entry><entry><title type="html">Image SuperResolution and Reconstruction</title><link href="https://kishanved.tech//blog/Image_SuperResolution_Reconstruction" rel="alternate" type="text/html" title="Image SuperResolution and Reconstruction"/><published>2024-07-14T00:00:00+00:00</published><updated>2024-07-14T00:00:00+00:00</updated><id>https://kishanved.tech//blog/Image_SuperResolution_Reconstruction</id><content type="html" xml:base="https://kishanved.tech//blog/Image_SuperResolution_Reconstruction"><![CDATA[<h1 id="image-super-resolution-and-reconstruction">Image Super Resolution and Reconstruction</h1> <p>Important GitHub links to codes used to create this file:</p> <p>A) <a href="https://github.com/Kishan-Ved/Image-SuperResolution-Reconstruction/blob/main/Image_SuperResolution_Qualitative.ipynb">Qualitative Analysis</a> <span style="font-family: Times New Roman; font-size: 20px;"></span></p> <p>B) <a href="https://github.com/Kishan-Ved/Image-SuperResolution-Reconstruction/blob/main/Image_SuperResolution._Quantitative.ipynb">Quantitative Analysis</a> <span style="font-family: Times New Roman; font-size: 20px;"></span></p> <p>C) <a href="https://github.com/Kishan-Ved/Image-SuperResolution-Reconstruction/blob/main/Image_Reconstruction.ipynb">Image Reconstruction</a> <span style="font-family: Times New Roman; font-size: 20px;"></span></p> <h2 id="super-resolution-using-random-fourier-features-and-linear-regression">Super-Resolution Using Random Fourier Features and Linear Regression</h2> <h3 id="a-qualitative-analysis">$A.$ Qualitative Analysis</h3> <p>The provided code performs Qualitative Analysis of Super-Resolution on a given Image using a Linear Model trained on Random Fourier Features. Here is the breakdown of the code:</p> <ol> <li> <p><strong>Imports:</strong> The necessary libraries such as PyTorch, torchvision, matplotlib, urllib, numpy, sklearn, einops, and warnings are imported. All of these libraries are necessary for the code to run.</p> </li> <li> <p><strong>Loading the Image:</strong> The image of a dog as mentioned in the question is taken form the instructer’s code and read using <code class="language-plaintext highlighter-rouge">torchvision.io.read_image</code> function. The image is then displayed using matplotlib.</p> <div align="center"> <img src="./Ques4Img/ori_dog.png" alt="dog_img" width="80%"/> </div> <p>+</p> </li> <li> <p><strong>Scaling the RGB Values:</strong> The RGB values of the image are scaled from 0 to 1 using Min-Max scaler from the sklearn.preprocessing module. The formula for scaling the RGB values is given by:</p> <p><strong>[ X_{scaled} = \frac{X_{max}-X}{X_{max}-X_{min}} ]</strong><br/> where ( X_{max} ) and ( X_{min} ) are the maximum and minimum values of the RGB channels, respectively.</p> </li> <li> <p><strong>Cropping the Image:</strong> Due to the memory constraints, the size of the target image we took is 100 x 100. The image is cropped to this size using the <code class="language-plaintext highlighter-rouge">torchvision.transforms.functional.crop</code> function.</p> <div align="center"> <img src="./Ques4Img/dog100.png" alt="dog_img" width="60%"/> </div> <p align="center">Cropped Image (100 x 100)</p> </li> <li> <p><strong>Creating Coordinate Map:</strong> A function is defined to create a coordinate map for the original image. The coordinate map consists of coordinates and corresponding to the pixel values of all the three channels (R G B).</p> </li> <li> <p><strong>Training the Linear Model:</strong> Another function is defined to train a linear model on the random Fourier features extracted from the coordinate map after scaling it. The model is trained using mean squared error loss and Adam optimizer.</p> </li> <li> <p><strong>Plotting Original vs. Enhanced Image:</strong> A function is defined to plot the original image and the enhanced image side by side.</p> </li> <li><strong>Enhancing the Image:</strong> An overall function that takes the original image, number of random Fourier features, sigma (kernel width for RBF sampler), learning rate, and number of epochs as input. It then creates random Fourier features, trains the linear model, and plots the original and enhanced images. <ul> <li> <p>The general equation for the Fourier basis functions can be expressed as follows:</p> <p><strong>For sine basis functions: [ \psi_k(x) = \sin(k \omega x + b_k) ]</strong></p> <p><strong>For cosine basis functions: [ \phi_k(x) = \cos(k \omega x + b_k) ]</strong></p> <p>Where:</p> <ul> <li>( k ) is the frequency index,</li> <li>( \omega ) is the angular frequency,</li> <li>( x ) is the input variable,</li> <li>( b_k ) is a randomly generated phase offset. (\newline)</li> </ul> </li> <li> <p>The bandwidth parameter <strong>( \sigma )</strong> influences the spread or width of the basis functions indirectly through the angular frequency <strong>( \omega )</strong>. Typically, <strong>( \omega = \frac{1}{\sigma} )</strong>. However, the direct inclusion of <strong>( \sigma )</strong> in the equation for Fourier basis functions is less common, as <strong>( \sigma )</strong> primarily affects the kernel function used in kernel methods rather than the basis functions themselves.</p> </li> </ul> </li> <li><strong>Enhancing the Image for Different Sigmas:</strong> The image is enhanced for different values of sigma for finding the better sigma (kernel width for RBF Sampler, it represents the bandwidth parameter of the fourier basis used for feature mapping), and the enhanced images are stored in a list. <ul> <li>For <strong>( \sigma )</strong> = 0.1</li> </ul> <div align="center"> <img src="./Ques4Img/dog_sigma01.png" alt="dog_img" width="50%"/> </div> <ul> <li>For <strong>( \sigma )</strong> = 0.04</li> </ul> <div align="center"> <img src="./Ques4Img/dog_sigma04.png" alt="dog_img" width="50%"/> </div> <ul> <li>For <strong>( \sigma )</strong> = 0.001</li> </ul> <div align="center"> <img src="./Ques4Img/dog_sigma001.png" alt="dog_img" width="50%"/> </div> <p>As you can see for higher <strong>( \sigma )</strong> values, the model is creating less complex decision boundaries and is not able to capture the fine details of the image. On the other hand, for lower <strong>( \sigma )</strong> values, the model is creating more complex decision boundaries and is able to capture the fine details of the image but further decreasing the <strong>( \sigma )</strong> value will lead to overfitting and the model will not be able to generalize well on the test data. This we can see in the image with <strong>( \sigma )</strong> = 0.001, the model has high variance.</p> </li> <li> <p><strong>Output:</strong> The comparison between the low-resolution image and the enhanced image is displayed for each sigma value. On comparison it is found that the image with the sigma value of around 0.04 gives the best results.</p> <ul> <li>For <strong>( \sigma )</strong> = 0.04</li> </ul> <div align="center"> <img src="./Ques4Img/dog_sigma04.png" alt="dog_img" width="50%"/> </div> </li> </ol> <p>The code effectively demonstrates Super-Resolution using a linear model trained on Random Fourier Features. It provides a qualitative comparison between the original and enhanced images, showing how the resolution is improved. Additionally, it allows experimenting with different values of sigma to observe their effects on the enhanced image over different bandwidths of the fourier basis used for feature mapping. We will also see the quantitative analysis in the next part of the question which will allow us to evaluate the performance of the super-resolution technique using RMSE and PSNR.</p> <p><strong>NOTE:</strong> <em>The quality of the output image depends on the choice of sigma (kernel width for RBF sampler) and the number of random Fourier features used, which can be further optimized using Hyperparameter Tuning.</em></p> <h3 id="b-quantitative-analysis">$B.$ Quantitative Analysis</h3> <p>The study can be further improved by adding quantitative analysis to evaluate the performance of the super-resolution technique. This can be done by calculating and comparing metrics such as Root Mean Square Error (RMSE) and Peak Signal-to-Noise Ratio (PSNR) between the Original $N$ x $N$ Image and Enhance $N$ x $N$ Image from $N/2$ x $N/2$ Image. Here is the breakdown of the code:</p> <ol> <li> <p><strong>Original Image (400 x 400):</strong><br/> The original image is the cropped image of size 400 x 400 pixels. This serves as the ground truth for comparison.</p> <div align="center"> <img src="./Ques4Img/dog_ground_truth.png" alt="dog_img" width="70%"/> </div> <p align="center">Ground Truth Image (400 x 400)</p> </li> <li> <p><strong>Low-Resolution Image (200 x 200):</strong><br/> The original image is downsampled using 2D convolution to create a low-resolution image with dimensions of 200 x 200 pixels.</p> <div align="center"> <img src="./Ques4Img/dog_lowres.png" alt="dog_img" width="70%"/> </div> <p align="center">Low-Resolution Image (200 x 200)</p> </li> <li> <p><strong>Generating Random Fourier Features:</strong><br/> Random Fourier features are generated for the scaled coordinates of the low-resolution image using the RBF Sampler. training a linear model on these features to learn the mapping from low to high resolution.</p> </li> <li> <p><strong>Training the Linear Model on RFF:</strong> The Linear Model has input features equal to the Random Fourier Features and the output features equal to the RGB values of the original image i.e, 3. The model is trained using mean squared error loss and Adam optimizer.</p> </li> <li><strong>Enhanced Image (400 x 400):</strong><br/> The learned model is then applied to the coordinate map of the low-resolution image to generate an enhanced version with dimensions of 400 x 400 pixels. <div align="center"> <img src="./Ques4Img/pred_dog.png" alt="dog_img" width="70%"/> </div> <p>[The image here formed is made with the sigma value of 0.03 and number of random Fourier features as 10000. As the 10000 features are not able to represent the data properly, the image is not enhanced properly and is not very comparable to the original image. This can be improved by increasing the number of random Fourier features which requires more computation and memory.]</p> </li> <li> <p><strong>Quantitative Metrics:</strong> The mean squared error (RMSE) and peak signal-to-noise ratio (PSNR) are calculated to quantitatively assess the similarity between the original and enhanced images. These metrics provide objective measures of the quality of the enhancement. The formulas for RMSE and PSNR are as follows:</p> <ul> <li> <p>Root Mean Square Error (RMSE): [ RMSE = \sqrt{\frac{1}{N} \sum_{i=1}^{N} (x_i - y_i)^2} ] where ( N ) is the total number of pixels in the image, ( x_i ) is the pixel value of the original image, and ( y_i ) is the pixel value of the enhanced image. We will calculate RMSE for each channel (R, G, B) and then take the sum of the three values.</p> </li> <li> <p>Peak Signal-to-Noise Ratio (PSNR): [ PSNR = 20 \log_{10}\left(\frac{MAX_I}{\sqrt{MSE}}\right) ] where ( MAX_I ) is the maximum possible pixel value (1.0 for scaled pixels values) and ( MSE ) is the mean squared error between the original and enhanced images.</p> </li> </ul> </li> <li><strong>Output:</strong> The RMSE and PSNR values that we got from the above calculations are as follows: <ul> <li>RMSE: 0.05166782811284065</li> <li>PSNR: 25.73858642578125</li> </ul> <p>The high PSNR value indicates that the enhanced image is very similar to the original image, and the low RMSE value further confirms this. The quantitative analysis provides a more objective evaluation of the super-resolution technique, allowing us to assess the effectiveness of the method in improving image resolution while preserving important features.</p> </li> </ol> <p>Overall, this approach allows for both qualitative and quantitative evaluation of the super-resolution technique. By comparing the original and enhanced images and calculating RMSE and PSNR, it provides insights into the effectiveness of the method in improving image resolution while preserving important features.</p> <h3 id="c-reconstruction-of-the-image">$C.$ Reconstruction of the Image</h3> <p>In this part, we randomly remove data from an image and then reconstruct it using random fourier features and linear regression.</p> <p>The following is the actual image:</p> <div align="center"> <img src="./Ques4Img/dog_ground_truth.png" alt="dog_img" width="70%"/> </div> <p>Now, we will randomly remove data from this image and reconstruct it. This image has a size of 400 x 400 pixels. For all the cases below, we use sigma 0.025 (for the RBF sampler) and 10000 random Fourier features.</p> <ol> <li> <p><strong>Remove 90% Data:</strong></p> <p>The image with 90% of the data removed is as follows:</p> <div align="center"> <img src="./Ques4Img/dog90.png" alt="dog_img" width="50%"/> </div> <p>The predicted image is:</p> <div align="center"> <img src="./Ques4Img/dog90p.png" alt="dog_img" width="90%"/> </div> <p>Root Mean Sqaured Error: 0.0786 PSNR: 22.08719840300042</p> </li> <li> <p><strong>Remove 80% Data:</strong></p> <p>The image with 80% of the data removed is as follows:</p> <div align="center"> <img src="./Ques4Img/dog80.png" alt="dog_img" width="50%"/> </div> <p>The predicted image is:</p> <div align="center"> <img src="./Ques4Img/dog80p.png" alt="dog_img" width="90%"/> </div> <p>Root Mean Sqaured Error: 0.0387 PSNR: 28.25418146450278</p> </li> <li> <p><strong>Remove 70% Data:</strong></p> <p>The image with 70% of the data removed is as follows:</p> <div align="center"> <img src="./Ques4Img/dog70.png" alt="dog_img" width="50%"/> </div> <p>The predicted image is:</p> <div align="center"> <img src="./Ques4Img/dog70p.png" alt="dog_img" width="90%"/> </div> <p>Root Mean Sqaured Error: 0.0330 PSNR: 29.63423604352773</p> </li> <li> <p><strong>Remove 60% Data:</strong></p> <p>The image with 60% of the data removed is as follows:</p> <div align="center"> <img src="./Ques4Img/dog60.png" alt="dog_img" width="50%"/> </div> <p>The predicted image is:</p> <div align="center"> <img src="./Ques4Img/dog60p.png" alt="dog_img" width="90%"/> </div> <p>Root Mean Sqaured Error: 0.0309 PSNR: 30.210612612395682</p> </li> <li> <p><strong>Remove 50% Data:</strong></p> <p>The image with 50% of the data removed is as follows:</p> <div align="center"> <img src="./Ques4Img/dog50.png" alt="dog_img" width="50%"/> </div> <p>The predicted image is:</p> <div align="center"> <img src="./Ques4Img/dog50p.png" alt="dog_img" width="90%"/> </div> <p>Root Mean Sqaured Error: 0.0301 PSNR: 30.43539642977963</p> </li> <li> <p><strong>Remove 40% Data:</strong></p> <p>The image with 40% of the data removed is as follows:</p> <div align="center"> <img src="./Ques4Img/dog40.png" alt="dog_img" width="50%"/> </div> <p>The predicted image is:</p> <div align="center"> <img src="./Ques4Img/dog40p.png" alt="dog_img" width="90%"/> </div> <p>Root Mean Sqaured Error: 0.0295 PSNR: 30.596299417410222</p> </li> <li> <p><strong>Remove 30% Data:</strong></p> <p>The image with 30% of the data removed is as follows:</p> <div align="center"> <img src="./Ques4Img/dog30.png" alt="dog_img" width="50%"/> </div> <p>The predicted image is:</p> <div align="center"> <img src="./Ques4Img/dog30p.png" alt="dog_img" width="90%"/> </div> <p>Root Mean Sqaured Error: 0.0292 PSNR: 30.686033211585062</p> </li> <li> <p><strong>Remove 20% Data:</strong></p> <p>The image with 20% of the data removed is as follows:</p> <div align="center"> <img src="./Ques4Img/dog20.png" alt="dog_img" width="50%"/> </div> <p>The predicted image is:</p> <div align="center"> <img src="./Ques4Img/dog20p.png" alt="dog_img" width="90%"/> </div> <p>Root Mean Sqaured Error: 0.0289 PSNR: 30.78619621879038</p> </li> <li> <p><strong>Remove 10% Data:</strong></p> <p>The image with 10% of the data removed is as follows:</p> <div align="center"> <img src="./Ques4Img/dog10.png" alt="dog_img" width="50%"/> </div> <p>The predicted image is:</p> <div align="center"> <img src="./Ques4Img/dog10p.png" alt="dog_img" width="90%"/> </div> <p>Root Mean Sqaured Error: 0.0286 PSNR: 30.86548449905607</p> </li> </ol> <h4 id="plots">Plots</h4> <h5 id="rmse-vs-percentage-of-data-removed">RMSE vs Percentage of Data Removed</h5> <p>The following plot shows the RMSE for different percentages of data removed from the image (denoted by x-axis):</p> <div align="center"> <img src="./Ques4Img/rmse.png" alt="dog_img" width="90%"/> </div> <h5 id="psnr-vs-percentage-of-data-removed">PSNR vs Percentage of Data Removed</h5> <p>The following plot shows the Peak Signal to Noise Ratio for different percentages of data removed from the image (denoted by x-axis):</p> <div align="center"> <img src="./Ques4Img/psnr.png" alt="dog_img" width="90%"/> </div> <h4 id="observations">Observations:</h4> <ol> <li>As we remove data, the rmse value increases as expected. This is because the error (with respect to the original image’s pixel values) increases, as we have less data to train the model.</li> <li>As we remove data, the peak SNR (signal to noise ratio) decreases. This is because now we have more data to train the model on, so the error (which is the noise) decreases.</li> </ol> <p>As we have lesser data to train on, our model cannot capture all the details of the image. We fit features based on data available and extrapolate these over unknown points, thus, we can’t capture all the details, rather, it’s an extrapolated approximation.</p> <p>10000 features have been used because of computational limitations. If the number of features are increased, then the model will be able to capture more details and the reconstructed image will be better.</p> <p>On increasing the value of sigma, the image becomes smoother and the details are not captured properly. On decreasing the value of sigma, the model overfits and the reconstructed image is not good. Thus, the value of sigma should be chosen carefully.</p> <p><strong>Changing sigma:</strong></p> <p>The image with 90% of the data removed is as follows:</p> <div align="center"> <img src="./Ques4Img/dog90.png" alt="dog_img" width="50%"/> </div> <p>The predicted image for sigma = 0.025 is:</p> <div align="center"> <img src="./Ques4Img/dog90p.png" alt="dog_img" width="90%"/> </div> <p>The predicted image for sigma = 0.03 is:</p> <div align="center"> <img src="./Ques4Img/dog90p2.png" alt="dog_img" width="90%"/> </div> <p>&lt;/span&gt;</p>]]></content><author><name></name></author><category term="ML"/><category term="ML"/><summary type="html"><![CDATA[A Machine Learning Project]]></summary></entry><entry><title type="html">GSoC’24 Week 9</title><link href="https://kishanved.tech//blog/week9" rel="alternate" type="text/html" title="GSoC’24 Week 9"/><published>2024-07-07T00:00:00+00:00</published><updated>2024-07-07T00:00:00+00:00</updated><id>https://kishanved.tech//blog/week9</id><content type="html" xml:base="https://kishanved.tech//blog/week9"><![CDATA[<h5 id="june-31---july-07"><code class="language-plaintext highlighter-rouge">[June 31 - July 07]</code></h5> <h2 id="first-evaluation-is-here">First Evaluation is here!</h2> <p>I’m officially at the middle of my Google Summer of Code 2024 program, but as I had started early, from the first week of May itself, I’ve completed a huge chunk of my GSoC project. The mid-term evaluation is coming up, which is from July 8 t July 12, and hence, here is all that I have achieved:</p> <h3 id="my-additions"><ins>My Additions:</ins></h3> <p>I have <code class="language-plaintext highlighter-rouge">3745 lines of code merged</code>, and I am the <a href="https://github.com/codezonediitj/pydatastructs/graphs/contributors?from=2019-06-16&amp;to=2024-07-08&amp;type=a"><code class="language-plaintext highlighter-rouge">#2 contributor by number of lines of code added</code></a>.</p> <ul> <li>Version changes: sphinx and myst_nb: <a href="https://github.com/codezonediitj/pydatastructs/pull/553"><code class="language-plaintext highlighter-rouge">PR #553</code></a></li> <li>C++ backend for Class Node: <a href="https://github.com/codezonediitj/pydatastructs/pull/556"><code class="language-plaintext highlighter-rouge">PR #556</code></a></li> <li>C++ backend for Class TreeNode: <a href="https://github.com/codezonediitj/pydatastructs/pull/556"><code class="language-plaintext highlighter-rouge">PR #556</code></a></li> <li>C++ backend for Class ArrayForTrees: <a href="https://github.com/codezonediitj/pydatastructs/pull/556"><code class="language-plaintext highlighter-rouge">PR #556</code></a></li> <li>C++ backend for Class Binary Trees: <a href="https://github.com/codezonediitj/pydatastructs/pull/556"><code class="language-plaintext highlighter-rouge">PR #556</code></a></li> <li>C++ backend for Class Binary Search Trees: <a href="https://github.com/codezonediitj/pydatastructs/pull/556"><code class="language-plaintext highlighter-rouge">PR #556</code></a></li> <li>C++ backend for Class Binary Tree Traversals: <a href="https://github.com/codezonediitj/pydatastructs/pull/556"><code class="language-plaintext highlighter-rouge">PR #556</code></a> <ul> <li>Depth First Search</li> <li>Pre-order traversal</li> <li>Post-order traversal</li> <li>In-order traversal</li> <li>Out-order traversal</li> <li>Breadth First Search</li> </ul> </li> <li>C++ backend for Class Self Balancing Binary Trees: <a href="https://github.com/codezonediitj/pydatastructs/pull/559"><code class="language-plaintext highlighter-rouge">PR #559</code></a></li> <li>C++ backend for Red Black Trees: <a href="https://github.com/codezonediitj/pydatastructs/pull/560"><code class="language-plaintext highlighter-rouge">PR #560</code></a></li> <li>C++ backend for Binary Indexed Trees: <a href="https://github.com/codezonediitj/pydatastructs/pull/561"><code class="language-plaintext highlighter-rouge">PR #561</code></a></li> <li>C++ backend for Splay Trees: <a href="https://github.com/codezonediitj/pydatastructs/pull/562"><code class="language-plaintext highlighter-rouge">PR #562</code></a></li> </ul> <h3 id="achievements"><ins>Achievements:</ins></h3> <p>The C++ backend provides <code class="language-plaintext highlighter-rouge">8-10 times faster code execution</code> than the Python backend. Here’s a benchmark test:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">test_BinarySearchTree</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="n">cpp</span> <span class="o">=</span> <span class="n">Backend</span><span class="p">.</span><span class="n">CPP</span>
    <span class="n">repeat</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">number</span> <span class="o">=</span> <span class="mi">1</span>

    <span class="n">size</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">PYDATASTRUCTS_BENCHMARK_SIZE</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">1000</span><span class="sh">"</span><span class="p">))</span>
    <span class="n">size</span> <span class="o">=</span> <span class="n">kwargs</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">size</span><span class="sh">"</span><span class="p">,</span> <span class="n">size</span><span class="p">)</span>

    <span class="n">BST</span> <span class="o">=</span> <span class="n">BinarySearchTree</span>
    <span class="n">b1</span> <span class="o">=</span> <span class="nc">BST</span><span class="p">(</span><span class="n">backend</span><span class="o">=</span><span class="n">Backend</span><span class="p">.</span><span class="n">PYTHON</span><span class="p">)</span>
    <span class="n">b2</span> <span class="o">=</span> <span class="nc">BST</span><span class="p">(</span><span class="n">backend</span><span class="o">=</span><span class="n">Backend</span><span class="p">.</span><span class="n">CPP</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">backend</span><span class="p">,</span> <span class="n">tree</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="o">-</span><span class="mi">1000</span><span class="p">,</span><span class="mi">1000</span><span class="p">):</span>
            <span class="n">tree</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">node</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">g</span><span class="p">(</span><span class="n">backend</span><span class="p">,</span> <span class="n">tree</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="o">-</span><span class="mi">1000</span><span class="p">,</span> <span class="mi">1000</span><span class="p">):</span>
            <span class="n">tree</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">h</span><span class="p">(</span><span class="n">backend</span><span class="p">,</span> <span class="n">tree</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">2000</span><span class="p">):</span>
            <span class="n">tree</span><span class="p">.</span><span class="nf">delete</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>

    <span class="n">kwds_dict_PY</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">backend</span><span class="sh">"</span><span class="p">:</span> <span class="n">Backend</span><span class="p">.</span><span class="n">PYTHON</span><span class="p">,</span> <span class="sh">"</span><span class="s">tree</span><span class="sh">"</span><span class="p">:</span><span class="n">b1</span><span class="p">}</span>
    <span class="n">kwds_dict_CPP</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">backend</span><span class="sh">"</span><span class="p">:</span> <span class="n">Backend</span><span class="p">.</span><span class="n">CPP</span><span class="p">,</span> <span class="sh">"</span><span class="s">tree</span><span class="sh">"</span><span class="p">:</span><span class="n">b2</span><span class="p">}</span>

    <span class="n">timer_python</span> <span class="o">=</span> <span class="n">timeit</span><span class="p">.</span><span class="nc">Timer</span><span class="p">(</span><span class="n">functools</span><span class="p">.</span><span class="nf">partial</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="o">**</span><span class="n">kwds_dict_PY</span><span class="p">))</span>
    <span class="n">python_insert</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">timer_python</span><span class="p">.</span><span class="nf">repeat</span><span class="p">(</span><span class="n">repeat</span><span class="p">,</span> <span class="n">number</span><span class="p">))</span>

    <span class="n">timer_cpp</span> <span class="o">=</span> <span class="n">timeit</span><span class="p">.</span><span class="nc">Timer</span><span class="p">(</span><span class="n">functools</span><span class="p">.</span><span class="nf">partial</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="o">**</span><span class="n">kwds_dict_CPP</span><span class="p">))</span>
    <span class="n">cpp_insert</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">timer_cpp</span><span class="p">.</span><span class="nf">repeat</span><span class="p">(</span><span class="n">repeat</span><span class="p">,</span> <span class="n">number</span><span class="p">))</span>
    <span class="k">assert</span> <span class="n">cpp_insert</span> <span class="o">&lt;</span> <span class="n">python_insert</span>

    <span class="n">timer_python</span> <span class="o">=</span> <span class="n">timeit</span><span class="p">.</span><span class="nc">Timer</span><span class="p">(</span><span class="n">functools</span><span class="p">.</span><span class="nf">partial</span><span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="o">**</span><span class="n">kwds_dict_PY</span><span class="p">))</span>
    <span class="n">python_search</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">timer_python</span><span class="p">.</span><span class="nf">repeat</span><span class="p">(</span><span class="n">repeat</span><span class="p">,</span> <span class="n">number</span><span class="p">))</span>

    <span class="n">timer_cpp</span> <span class="o">=</span> <span class="n">timeit</span><span class="p">.</span><span class="nc">Timer</span><span class="p">(</span><span class="n">functools</span><span class="p">.</span><span class="nf">partial</span><span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="o">**</span><span class="n">kwds_dict_CPP</span><span class="p">))</span>
    <span class="n">cpp_search</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">timer_cpp</span><span class="p">.</span><span class="nf">repeat</span><span class="p">(</span><span class="n">repeat</span><span class="p">,</span> <span class="n">number</span><span class="p">))</span>
    <span class="k">assert</span> <span class="n">cpp_search</span> <span class="o">&lt;</span> <span class="n">python_search</span>

    <span class="n">timer_python</span> <span class="o">=</span> <span class="n">timeit</span><span class="p">.</span><span class="nc">Timer</span><span class="p">(</span><span class="n">functools</span><span class="p">.</span><span class="nf">partial</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="o">**</span><span class="n">kwds_dict_PY</span><span class="p">))</span>
    <span class="n">python_delete</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">timer_python</span><span class="p">.</span><span class="nf">repeat</span><span class="p">(</span><span class="n">repeat</span><span class="p">,</span> <span class="n">number</span><span class="p">))</span>

    <span class="n">timer_cpp</span> <span class="o">=</span> <span class="n">timeit</span><span class="p">.</span><span class="nc">Timer</span><span class="p">(</span><span class="n">functools</span><span class="p">.</span><span class="nf">partial</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="o">**</span><span class="n">kwds_dict_CPP</span><span class="p">))</span>
    <span class="n">cpp_delete</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">timer_cpp</span><span class="p">.</span><span class="nf">repeat</span><span class="p">(</span><span class="n">repeat</span><span class="p">,</span> <span class="n">number</span><span class="p">))</span>
    <span class="k">assert</span> <span class="n">cpp_delete</span> <span class="o">&lt;</span> <span class="n">python_delete</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Python Time:</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">insert(): </span><span class="sh">"</span><span class="p">,</span><span class="n">python_insert</span><span class="p">,</span><span class="sh">"</span><span class="s">s</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">search(): </span><span class="sh">"</span><span class="p">,</span><span class="n">python_search</span><span class="p">,</span><span class="sh">"</span><span class="s">s</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">delete(): </span><span class="sh">"</span><span class="p">,</span><span class="n">python_delete</span><span class="p">,</span><span class="sh">"</span><span class="s">s</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">python_total</span> <span class="o">=</span> <span class="n">python_insert</span><span class="o">+</span><span class="n">python_search</span><span class="o">+</span><span class="n">python_delete</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Total Python time: </span><span class="sh">"</span><span class="p">,</span> <span class="n">python_total</span><span class="p">,</span><span class="sh">"</span><span class="s">s</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">C++ Time:</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">insert(): </span><span class="sh">"</span><span class="p">,</span><span class="n">cpp_insert</span><span class="p">,</span><span class="sh">"</span><span class="s">s</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">search(): </span><span class="sh">"</span><span class="p">,</span><span class="n">cpp_search</span><span class="p">,</span><span class="sh">"</span><span class="s">s</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">delete(): </span><span class="sh">"</span><span class="p">,</span><span class="n">cpp_delete</span><span class="p">,</span><span class="sh">"</span><span class="s">s</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">cpp_total</span> <span class="o">=</span> <span class="n">cpp_insert</span><span class="o">+</span><span class="n">cpp_search</span><span class="o">+</span><span class="n">cpp_delete</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Total C++ time: </span><span class="sh">"</span><span class="p">,</span> <span class="n">cpp_total</span><span class="p">,</span><span class="sh">"</span><span class="s">s</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">C++ backend is</span><span class="sh">"</span><span class="p">,</span><span class="nf">round</span><span class="p">(</span><span class="n">python_total</span><span class="o">/</span><span class="n">cpp_total</span><span class="p">),</span><span class="sh">"</span><span class="s">times faster!</span><span class="sh">"</span><span class="p">)</span>
    
<span class="nf">test_BinarySearchTree</span><span class="p">()</span>
</code></pre></div></div> <p>Output:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Python Time:
insert():  7.025027044000126 s
search():  3.316694295000161 s
delete():  3.271200282000109 s
Total Python time:  13.612921621000396 s

C++ Time:
insert():  0.9178718929999832 s
search():  0.43746472500015443 s
delete():  0.7311443830001281 s
Total C++ time:  2.0864810010002657 s

C++ backend is 7 times faster!
</code></pre></div></div> <hr/> <h3 id="coding-info"><ins>Coding info</ins></h3> <p>This week, I finished coding up the <code class="language-plaintext highlighter-rouge">C++ backend for AVL Trees</code>. The following methods were implemented:</p> <ul> <li><code class="language-plaintext highlighter-rouge">AVLTree__balance_delete()</code></li> <li><code class="language-plaintext highlighter-rouge">AVLTree_delete()</code></li> <li><code class="language-plaintext highlighter-rouge">AVLTree_rank()</code></li> <li><code class="language-plaintext highlighter-rouge">AVLTree_select()</code></li> </ul> <p>I have created a lightweight testing feature that runs all the test files excluding benchmark tests. This is useful to test locally, when the benchmark tests become too computationally heavy for the contributor’s machine to handle. I also modified one GitHub action to run only benchmark tests, saving both time and memory.</p> <h3 id="relevant-prs"><ins>Relevant PRs:</ins></h3> <p>PR for C++ backend for AVL Trees: <a href="https://github.com/codezonediitj/pydatastructs/pull/564">#564</a></p> <p>In the following week, I will implement the C++ backend for Cartesian Trees.</p> <h3 id="learningsdifficulties"><ins>Learnings/Difficulties</ins></h3> <p>No major difficulties this week, just a few random segmentation faults, which were not critical and were solved easily. Everything going smoothly, I’m enjoying my Google Summer of Code project!</p> <p><br/> Thanks to my mentor, <a href="https://github.com/czgdp1807">Gagandeep Singh</a>, for his support throughout.</p> <p>See you again after a productive week! 😊</p>]]></content><author><name></name></author><category term="Weekly_Blogs"/><category term="GSoC&apos;24"/><summary type="html"><![CDATA[C++ backend for AVL Trees and lightweighted testing feature.]]></summary></entry><entry><title type="html">GSoC’24 Week 8</title><link href="https://kishanved.tech//blog/week8" rel="alternate" type="text/html" title="GSoC’24 Week 8"/><published>2024-06-30T00:00:00+00:00</published><updated>2024-06-30T00:00:00+00:00</updated><id>https://kishanved.tech//blog/week8</id><content type="html" xml:base="https://kishanved.tech//blog/week8"><![CDATA[<h5 id="june-24---june-30"><code class="language-plaintext highlighter-rouge">[June 24 - June 30]</code></h5> <h2 id="im-coding-ding-ding-ding">I’m Co..ding ding ding ding!</h2> <p>Incase you are wondering what the heading means, I’m emphasising the joy I get by coding all day. Its been 2 months since I started my <code class="language-plaintext highlighter-rouge">Google Summer of Code</code> project, and it has been an amazing and a rewarding journey. Cheers to another productive month of GSoC 2024.</p> <hr/> <h3 id="coding-info"><ins>Coding info</ins></h3> <p>This week, I finished coding up the <code class="language-plaintext highlighter-rouge">C++ backend for Splay Trees</code>. The following methods were implemented:</p> <ul> <li><code class="language-plaintext highlighter-rouge">SplayTree_split()</code></li> <li><code class="language-plaintext highlighter-rouge">SplayTree_join()</code></li> <li><code class="language-plaintext highlighter-rouge">SplayTree_preorder()</code></li> <li><code class="language-plaintext highlighter-rouge">SplayTree_search()</code></li> </ul> <p>Comprehensive tests were added and I ensured that all of them passed.</p> <p>Next, I started working on implementing a <code class="language-plaintext highlighter-rouge">C++ backend for AVL Trees</code>. In this week, I implemented the following functions:</p> <ul> <li><code class="language-plaintext highlighter-rouge">AVLTree_left_height()</code></li> <li><code class="language-plaintext highlighter-rouge">AVLTree_right_height()</code></li> <li><code class="language-plaintext highlighter-rouge">AVLTree_balance_factor()</code></li> <li><code class="language-plaintext highlighter-rouge">AVLTree__right_rotate()</code></li> <li><code class="language-plaintext highlighter-rouge">AVLTree__left_right_rotate()</code></li> <li><code class="language-plaintext highlighter-rouge">AVLTree__right_left_rotate()</code></li> <li><code class="language-plaintext highlighter-rouge">AVLTree__left_rotate()</code></li> <li><code class="language-plaintext highlighter-rouge">AVLTree__balance_insertion()</code></li> <li><code class="language-plaintext highlighter-rouge">AVLTree_insert()</code></li> </ul> <h3 id="relevant-prs"><ins>Relevant PRs:</ins></h3> <p>PR for C++ backend for Splay Trees (merged): <a href="https://github.com/codezonediitj/pydatastructs/pull/562">#562</a></p> <p>PR for C++ backend for AVL Trees (work in progress): <a href="https://github.com/codezonediitj/pydatastructs/pull/564">#564</a></p> <p>In the following week, I will continue adding more functionality to the C++ backend of AVL Trees.</p> <h3 id="learningsdifficulties"><ins>Learnings/Difficulties</ins></h3> <p>Just one line: Patience and determination lead to resolution of bugs and segfaults.</p> <p><br/> Thanks to my mentor, <a href="https://github.com/czgdp1807">Gagandeep Singh</a>, for his support throughout.</p> <p>See you again after an amazing week! 😊</p>]]></content><author><name></name></author><category term="Weekly_Blogs"/><category term="GSoC&apos;24"/><summary type="html"><![CDATA[C++ backend for Splay Trees done! Started working on implementing a C++ backend for AVL Trees.]]></summary></entry><entry><title type="html">GSoC’24 Week 7</title><link href="https://kishanved.tech//blog/week7" rel="alternate" type="text/html" title="GSoC’24 Week 7"/><published>2024-06-23T00:00:00+00:00</published><updated>2024-06-23T00:00:00+00:00</updated><id>https://kishanved.tech//blog/week7</id><content type="html" xml:base="https://kishanved.tech//blog/week7"><![CDATA[<h5 id="june-17---june-23"><code class="language-plaintext highlighter-rouge">[June 17 - June 23]</code></h5> <h2 id="eat--sleep--code--repeat">Eat + Sleep + Code + Repeat!</h2> <hr/> <h3 id="coding-info"><ins>Coding info</ins></h3> <p>This week, I coded up the <code class="language-plaintext highlighter-rouge">C++ backend for Splay Trees</code>. The following methods were implemented:</p> <ul> <li><code class="language-plaintext highlighter-rouge">SplayTree__zig()</code></li> <li><code class="language-plaintext highlighter-rouge">SplayTree__zig_zig()</code></li> <li><code class="language-plaintext highlighter-rouge">SplayTree__zig_zag()</code></li> <li><code class="language-plaintext highlighter-rouge">SplayTree__zag_zag()</code></li> <li><code class="language-plaintext highlighter-rouge">SplayTree__zag_zig()</code></li> <li><code class="language-plaintext highlighter-rouge">SplayTree_splay()</code></li> <li><code class="language-plaintext highlighter-rouge">SplayTree_insert()</code></li> <li><code class="language-plaintext highlighter-rouge">SplayTree_delete()</code></li> </ul> <p>In case you find the names funny, just check out the code! They are all different functions with different roles, which are important for different insertions/deletions/algorithms in splay trees. (But I agree that the names sound funny 😀)</p> <h3 id="relevant-prs"><ins>Relevant PRs:</ins></h3> <p>PR for C++ backend for Splay Trees (work in progress): <a href="https://github.com/codezonediitj/pydatastructs/pull/562">#562</a></p> <p>In the following week, I will finish implementing Splay Trees in the C++ backend. Then, I will start making the C++ backend for the next tree data structure.</p> <h3 id="learningsdifficulties"><ins>Learnings/Difficulties</ins></h3> <p>I encountered some segmentation faults, and I used print statements to figure out the exact line where they occured. Used a little DSA here, did a binary search on the code to find the error :) .</p> <p><br/> Thanks to my mentor, <a href="https://github.com/czgdp1807">Gagandeep Singh</a>, for his support throughout.</p> <p>See you again after a productive week! 😊</p>]]></content><author><name></name></author><category term="Weekly_Blogs"/><category term="GSoC&apos;24"/><summary type="html"><![CDATA[Worked on C++ backend for Splay Trees for week 7 of my Google Summer of Code.]]></summary></entry><entry><title type="html">GSoC’24 Week 6</title><link href="https://kishanved.tech//blog/week6" rel="alternate" type="text/html" title="GSoC’24 Week 6"/><published>2024-06-16T00:00:00+00:00</published><updated>2024-06-16T00:00:00+00:00</updated><id>https://kishanved.tech//blog/week6</id><content type="html" xml:base="https://kishanved.tech//blog/week6"><![CDATA[<h5 id="june-10---june-16"><code class="language-plaintext highlighter-rouge">[June 10 - June 16]</code></h5> <h2 id="my-fingers-code-faster-than-i-can-think">My fingers code faster than I can think!</h2> <hr/> <h3 id="coding-info"><ins>Coding info</ins></h3> <p>In the first half of this week, I completed the <code class="language-plaintext highlighter-rouge">Red Black Trees</code> class. In the second half, I worked on <code class="language-plaintext highlighter-rouge">Binary Indexed Trees</code> (which can also be interpreted as <code class="language-plaintext highlighter-rouge">Fenwick Trees</code>).</p> <p>For Red Black Trees, the following methods have been implemented in the C++ backend, and tested exhaustively:</p> <ul> <li><code class="language-plaintext highlighter-rouge">insert()</code> <ul> <li><code class="language-plaintext highlighter-rouge">_get_parent()</code></li> <li><code class="language-plaintext highlighter-rouge">_get_grand_parent()</code></li> <li><code class="language-plaintext highlighter-rouge">_get_sibling()</code></li> <li><code class="language-plaintext highlighter-rouge">_get_uncle()</code></li> <li><code class="language-plaintext highlighter-rouge">_is_onleft()</code></li> <li><code class="language-plaintext highlighter-rouge">_is_onright()</code></li> <li><code class="language-plaintext highlighter-rouge">__fix_insert()</code></li> </ul> </li> <li><code class="language-plaintext highlighter-rouge">delete()</code> <ul> <li><code class="language-plaintext highlighter-rouge">_find_predecessor()</code></li> <li><code class="language-plaintext highlighter-rouge">_transplant_values()</code></li> <li><code class="language-plaintext highlighter-rouge">_has_one_child()</code></li> <li><code class="language-plaintext highlighter-rouge">_is_leaf()</code></li> <li><code class="language-plaintext highlighter-rouge">_has_two_child()</code></li> <li><code class="language-plaintext highlighter-rouge">__has_red_child()</code></li> <li><code class="language-plaintext highlighter-rouge">_replace_node()</code></li> <li><code class="language-plaintext highlighter-rouge">__walk1_walk_isblack()</code></li> <li><code class="language-plaintext highlighter-rouge">__left_left_siblingcase()</code></li> <li><code class="language-plaintext highlighter-rouge">__right_left_siblingcase()</code></li> <li><code class="language-plaintext highlighter-rouge">__left_right_siblingcase()</code></li> <li><code class="language-plaintext highlighter-rouge">__right_right_siblingcase()</code></li> <li><code class="language-plaintext highlighter-rouge">__fix_deletion()</code></li> <li><code class="language-plaintext highlighter-rouge">_remove_node()</code></li> <li><code class="language-plaintext highlighter-rouge">_delete_root()</code></li> <li><code class="language-plaintext highlighter-rouge">__leaf_case()</code></li> <li><code class="language-plaintext highlighter-rouge">__one_child_case()</code></li> <li><code class="language-plaintext highlighter-rouge">__two_child_case()</code></li> </ul> </li> <li>All tree traversals (<strong>OOPS concepts used to resuse code</strong>)</li> </ul> <p>For Binary Indexed Trees, I’ve implemented the following methods in the C++ backend:</p> <ul> <li><code class="language-plaintext highlighter-rouge">update()</code></li> <li><code class="language-plaintext highlighter-rouge">get_prefix_sum()</code></li> <li><code class="language-plaintext highlighter-rouge">get_sum()</code></li> </ul> <h3 id="relevant-prs"><ins>Relevant PRs:</ins></h3> <p>PR for RedBlackTrees (merged): <a href="https://github.com/codezonediitj/pydatastructs/pull/560">#560</a></p> <p>PR for BinaryIndexedTrees (merged): <a href="https://github.com/codezonediitj/pydatastructs/pull/561">#561</a></p> <p>In the following week, I will implement Splay Trees in the C++ backend.</p> <h3 id="learningsdifficulties"><ins>Learnings/Difficulties</ins></h3> <p>Everything is now going smoothly! My fingers code faster than I can think! I’ve understood the process and now become good at it, yay.</p> <p><br/> Thanks to my mentor, <a href="https://github.com/czgdp1807">Gagandeep Singh</a>, for his support throughout.</p> <p>See you again after an amazing week! 😊</p>]]></content><author><name></name></author><category term="Weekly_Blogs"/><category term="GSoC&apos;24"/><summary type="html"><![CDATA[Red Black Trees and Binary Indexed Trees completed!]]></summary></entry></feed>