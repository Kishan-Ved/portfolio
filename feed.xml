<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://kishanved.tech//feed.xml" rel="self" type="application/atom+xml"/><link href="https://kishanved.tech//" rel="alternate" type="text/html" hreflang="en"/><updated>2024-07-08T07:50:33+00:00</updated><id>https://kishanved.tech//feed.xml</id><title type="html">Kishan Ved</title><subtitle>Kishan Ved&apos;s portfolio website. </subtitle><entry><title type="html">GSoC’24 Week 9</title><link href="https://kishanved.tech//blog/week9" rel="alternate" type="text/html" title="GSoC’24 Week 9"/><published>2024-07-07T00:00:00+00:00</published><updated>2024-07-07T00:00:00+00:00</updated><id>https://kishanved.tech//blog/week9</id><content type="html" xml:base="https://kishanved.tech//blog/week9"><![CDATA[<h5 id="june-31---july-07"><code class="language-plaintext highlighter-rouge">[June 31 - July 07]</code></h5> <h2 id="first-evaluation-is-here">First Evaluation is here!</h2> <p>I’m officially at the middle of my Google Summer of Code 2024 program, but as I had started early, from the first week of May itself, I’ve completed a huge chunk of my GSoC project. The mid-term evaluation is coming up, which is from July 8 t July 12, and hence, here is all that I have achieved:</p> <h3 id="my-additions"><ins>My Additions:</ins></h3> <p>I have <code class="language-plaintext highlighter-rouge">3745 lines of code merged</code>, and I am the <a href="https://github.com/codezonediitj/pydatastructs/graphs/contributors?from=2019-06-16&amp;to=2024-07-08&amp;type=a"><code class="language-plaintext highlighter-rouge">#2 contributor by number of lines of code added</code></a>.</p> <ul> <li>Version changes: sphinx and myst_nb: <a href="https://github.com/codezonediitj/pydatastructs/pull/553"><code class="language-plaintext highlighter-rouge">PR #553</code></a></li> <li>C++ backend for Class Node: <a href="https://github.com/codezonediitj/pydatastructs/pull/556"><code class="language-plaintext highlighter-rouge">PR #556</code></a></li> <li>C++ backend for Class TreeNode: <a href="https://github.com/codezonediitj/pydatastructs/pull/556"><code class="language-plaintext highlighter-rouge">PR #556</code></a></li> <li>C++ backend for Class ArrayForTrees: <a href="https://github.com/codezonediitj/pydatastructs/pull/556"><code class="language-plaintext highlighter-rouge">PR #556</code></a></li> <li>C++ backend for Class Binary Trees: <a href="https://github.com/codezonediitj/pydatastructs/pull/556"><code class="language-plaintext highlighter-rouge">PR #556</code></a></li> <li>C++ backend for Class Binary Search Trees: <a href="https://github.com/codezonediitj/pydatastructs/pull/556"><code class="language-plaintext highlighter-rouge">PR #556</code></a></li> <li>C++ backend for Class Binary Tree Traversals: <a href="https://github.com/codezonediitj/pydatastructs/pull/556"><code class="language-plaintext highlighter-rouge">PR #556</code></a> <ul> <li>Depth First Search</li> <li>Pre-order traversal</li> <li>Post-order traversal</li> <li>In-order traversal</li> <li>Out-order traversal</li> <li>Breadth First Search</li> </ul> </li> <li>C++ backend for Class Self Balancing Binary Trees: <a href="https://github.com/codezonediitj/pydatastructs/pull/559"><code class="language-plaintext highlighter-rouge">PR #559</code></a></li> <li>C++ backend for Red Black Trees: <a href="https://github.com/codezonediitj/pydatastructs/pull/560"><code class="language-plaintext highlighter-rouge">PR #560</code></a></li> <li>C++ backend for Binary Indexed Trees: <a href="https://github.com/codezonediitj/pydatastructs/pull/561"><code class="language-plaintext highlighter-rouge">PR #561</code></a></li> <li>C++ backend for Splay Trees: <a href="https://github.com/codezonediitj/pydatastructs/pull/562"><code class="language-plaintext highlighter-rouge">PR #562</code></a></li> </ul> <h3 id="achievements"><ins>Achievements”</ins></h3> <p>The C++ backend provides <code class="language-plaintext highlighter-rouge">8-10 times faster code execution</code> than the Python backend. Here’s a benchmark test:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">test_BinarySearchTree</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="n">cpp</span> <span class="o">=</span> <span class="n">Backend</span><span class="p">.</span><span class="n">CPP</span>
    <span class="n">repeat</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">number</span> <span class="o">=</span> <span class="mi">1</span>

    <span class="n">size</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">PYDATASTRUCTS_BENCHMARK_SIZE</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">1000</span><span class="sh">"</span><span class="p">))</span>
    <span class="n">size</span> <span class="o">=</span> <span class="n">kwargs</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">size</span><span class="sh">"</span><span class="p">,</span> <span class="n">size</span><span class="p">)</span>

    <span class="n">BST</span> <span class="o">=</span> <span class="n">BinarySearchTree</span>
    <span class="n">b1</span> <span class="o">=</span> <span class="nc">BST</span><span class="p">(</span><span class="n">backend</span><span class="o">=</span><span class="n">Backend</span><span class="p">.</span><span class="n">PYTHON</span><span class="p">)</span>
    <span class="n">b2</span> <span class="o">=</span> <span class="nc">BST</span><span class="p">(</span><span class="n">backend</span><span class="o">=</span><span class="n">Backend</span><span class="p">.</span><span class="n">CPP</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">backend</span><span class="p">,</span> <span class="n">tree</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="o">-</span><span class="mi">1000</span><span class="p">,</span><span class="mi">1000</span><span class="p">):</span>
            <span class="n">tree</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">node</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">g</span><span class="p">(</span><span class="n">backend</span><span class="p">,</span> <span class="n">tree</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="o">-</span><span class="mi">1000</span><span class="p">,</span> <span class="mi">1000</span><span class="p">):</span>
            <span class="n">tree</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">h</span><span class="p">(</span><span class="n">backend</span><span class="p">,</span> <span class="n">tree</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">2000</span><span class="p">):</span>
            <span class="n">tree</span><span class="p">.</span><span class="nf">delete</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>

    <span class="n">kwds_dict_PY</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">backend</span><span class="sh">"</span><span class="p">:</span> <span class="n">Backend</span><span class="p">.</span><span class="n">PYTHON</span><span class="p">,</span> <span class="sh">"</span><span class="s">tree</span><span class="sh">"</span><span class="p">:</span><span class="n">b1</span><span class="p">}</span>
    <span class="n">kwds_dict_CPP</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">backend</span><span class="sh">"</span><span class="p">:</span> <span class="n">Backend</span><span class="p">.</span><span class="n">CPP</span><span class="p">,</span> <span class="sh">"</span><span class="s">tree</span><span class="sh">"</span><span class="p">:</span><span class="n">b2</span><span class="p">}</span>

    <span class="n">timer_python</span> <span class="o">=</span> <span class="n">timeit</span><span class="p">.</span><span class="nc">Timer</span><span class="p">(</span><span class="n">functools</span><span class="p">.</span><span class="nf">partial</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="o">**</span><span class="n">kwds_dict_PY</span><span class="p">))</span>
    <span class="n">python_insert</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">timer_python</span><span class="p">.</span><span class="nf">repeat</span><span class="p">(</span><span class="n">repeat</span><span class="p">,</span> <span class="n">number</span><span class="p">))</span>

    <span class="n">timer_cpp</span> <span class="o">=</span> <span class="n">timeit</span><span class="p">.</span><span class="nc">Timer</span><span class="p">(</span><span class="n">functools</span><span class="p">.</span><span class="nf">partial</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="o">**</span><span class="n">kwds_dict_CPP</span><span class="p">))</span>
    <span class="n">cpp_insert</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">timer_cpp</span><span class="p">.</span><span class="nf">repeat</span><span class="p">(</span><span class="n">repeat</span><span class="p">,</span> <span class="n">number</span><span class="p">))</span>
    <span class="k">assert</span> <span class="n">cpp_insert</span> <span class="o">&lt;</span> <span class="n">python_insert</span>

    <span class="n">timer_python</span> <span class="o">=</span> <span class="n">timeit</span><span class="p">.</span><span class="nc">Timer</span><span class="p">(</span><span class="n">functools</span><span class="p">.</span><span class="nf">partial</span><span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="o">**</span><span class="n">kwds_dict_PY</span><span class="p">))</span>
    <span class="n">python_search</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">timer_python</span><span class="p">.</span><span class="nf">repeat</span><span class="p">(</span><span class="n">repeat</span><span class="p">,</span> <span class="n">number</span><span class="p">))</span>

    <span class="n">timer_cpp</span> <span class="o">=</span> <span class="n">timeit</span><span class="p">.</span><span class="nc">Timer</span><span class="p">(</span><span class="n">functools</span><span class="p">.</span><span class="nf">partial</span><span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="o">**</span><span class="n">kwds_dict_CPP</span><span class="p">))</span>
    <span class="n">cpp_search</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">timer_cpp</span><span class="p">.</span><span class="nf">repeat</span><span class="p">(</span><span class="n">repeat</span><span class="p">,</span> <span class="n">number</span><span class="p">))</span>
    <span class="k">assert</span> <span class="n">cpp_search</span> <span class="o">&lt;</span> <span class="n">python_search</span>

    <span class="n">timer_python</span> <span class="o">=</span> <span class="n">timeit</span><span class="p">.</span><span class="nc">Timer</span><span class="p">(</span><span class="n">functools</span><span class="p">.</span><span class="nf">partial</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="o">**</span><span class="n">kwds_dict_PY</span><span class="p">))</span>
    <span class="n">python_delete</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">timer_python</span><span class="p">.</span><span class="nf">repeat</span><span class="p">(</span><span class="n">repeat</span><span class="p">,</span> <span class="n">number</span><span class="p">))</span>

    <span class="n">timer_cpp</span> <span class="o">=</span> <span class="n">timeit</span><span class="p">.</span><span class="nc">Timer</span><span class="p">(</span><span class="n">functools</span><span class="p">.</span><span class="nf">partial</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="o">**</span><span class="n">kwds_dict_CPP</span><span class="p">))</span>
    <span class="n">cpp_delete</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">timer_cpp</span><span class="p">.</span><span class="nf">repeat</span><span class="p">(</span><span class="n">repeat</span><span class="p">,</span> <span class="n">number</span><span class="p">))</span>
    <span class="k">assert</span> <span class="n">cpp_delete</span> <span class="o">&lt;</span> <span class="n">python_delete</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Python Time:</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">insert(): </span><span class="sh">"</span><span class="p">,</span><span class="n">python_insert</span><span class="p">,</span><span class="sh">"</span><span class="s">s</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">search(): </span><span class="sh">"</span><span class="p">,</span><span class="n">python_search</span><span class="p">,</span><span class="sh">"</span><span class="s">s</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">delete(): </span><span class="sh">"</span><span class="p">,</span><span class="n">python_delete</span><span class="p">,</span><span class="sh">"</span><span class="s">s</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">python_total</span> <span class="o">=</span> <span class="n">python_insert</span><span class="o">+</span><span class="n">python_search</span><span class="o">+</span><span class="n">python_delete</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Total Python time: </span><span class="sh">"</span><span class="p">,</span> <span class="n">python_total</span><span class="p">,</span><span class="sh">"</span><span class="s">s</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">C++ Time:</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">insert(): </span><span class="sh">"</span><span class="p">,</span><span class="n">cpp_insert</span><span class="p">,</span><span class="sh">"</span><span class="s">s</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">search(): </span><span class="sh">"</span><span class="p">,</span><span class="n">cpp_search</span><span class="p">,</span><span class="sh">"</span><span class="s">s</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">delete(): </span><span class="sh">"</span><span class="p">,</span><span class="n">cpp_delete</span><span class="p">,</span><span class="sh">"</span><span class="s">s</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">cpp_total</span> <span class="o">=</span> <span class="n">cpp_insert</span><span class="o">+</span><span class="n">cpp_search</span><span class="o">+</span><span class="n">cpp_delete</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Total C++ time: </span><span class="sh">"</span><span class="p">,</span> <span class="n">cpp_total</span><span class="p">,</span><span class="sh">"</span><span class="s">s</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">C++ backend is</span><span class="sh">"</span><span class="p">,</span><span class="nf">round</span><span class="p">(</span><span class="n">python_total</span><span class="o">/</span><span class="n">cpp_total</span><span class="p">),</span><span class="sh">"</span><span class="s">times faster!</span><span class="sh">"</span><span class="p">)</span>
    
<span class="nf">test_BinarySearchTree</span><span class="p">()</span>
</code></pre></div></div> <p>Output:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Python Time:
insert():  7.025027044000126 s
search():  3.316694295000161 s
delete():  3.271200282000109 s
Total Python time:  13.612921621000396 s

C++ Time:
insert():  0.9178718929999832 s
search():  0.43746472500015443 s
delete():  0.7311443830001281 s
Total C++ time:  2.0864810010002657 s

C++ backend is 7 times faster!
</code></pre></div></div> <hr/> <h3 id="coding-info"><ins>Coding info</ins></h3> <p>This week, I finished coding up the <code class="language-plaintext highlighter-rouge">C++ backend for AVL Trees</code>. The following methods were implemented:</p> <ul> <li><code class="language-plaintext highlighter-rouge">AVLTree__balance_delete()</code></li> <li><code class="language-plaintext highlighter-rouge">AVLTree_delete()</code></li> <li><code class="language-plaintext highlighter-rouge">AVLTree_rank()</code></li> <li><code class="language-plaintext highlighter-rouge">AVLTree_select()</code></li> </ul> <p>I have created a lightweight testing feature that runs all the test files excluding benchmark tests. This is useful to test locally, when the benchmark tests become too computationally heavy for the contributor’s machine to handle. I also modified one GitHub action to run only benchmark tests, saving both time and memory.</p> <h3 id="relevant-prs"><ins>Relevant PRs:</ins></h3> <p>PR for C++ backend for AVL Trees: <a href="https://github.com/codezonediitj/pydatastructs/pull/564">#564</a></p> <p>In the following week, I will implement the C++ backend for Cartesian Trees.</p> <h3 id="learningsdifficulties"><ins>Learnings/Difficulties</ins></h3> <p>No major difficulties this week, just a few random segmentation faults, which were not critical and were solved easily. Everything going smoothly, I’m enjoying my Google Summer of Code project!</p> <p><br/> Thanks to my mentor, <a href="https://github.com/czgdp1807">Gagandeep Singh</a>, for his support throughout.</p> <p>See you again after a productive week! 😊</p>]]></content><author><name></name></author><category term="Weekly_Blogs"/><category term="GSoC&apos;24"/><summary type="html"><![CDATA[C++ backend for AVL Trees and lightweighted testing feature.]]></summary></entry><entry><title type="html">GSoC’24 Week 8</title><link href="https://kishanved.tech//blog/week8" rel="alternate" type="text/html" title="GSoC’24 Week 8"/><published>2024-06-30T00:00:00+00:00</published><updated>2024-06-30T00:00:00+00:00</updated><id>https://kishanved.tech//blog/week8</id><content type="html" xml:base="https://kishanved.tech//blog/week8"><![CDATA[<h5 id="june-24---june-30"><code class="language-plaintext highlighter-rouge">[June 24 - June 30]</code></h5> <h2 id="im-coding-ding-ding-ding">I’m Co..ding ding ding ding!</h2> <p>Incase you are wondering what the heading means, I’m emphasising the joy I get by coding all day. Its been 2 months since I started my <code class="language-plaintext highlighter-rouge">Google Summer of Code</code> project, and it has been an amazing and a rewarding journey. Cheers to another productive month of GSoC 2024.</p> <hr/> <h3 id="coding-info"><ins>Coding info</ins></h3> <p>This week, I finished coding up the <code class="language-plaintext highlighter-rouge">C++ backend for Splay Trees</code>. The following methods were implemented:</p> <ul> <li><code class="language-plaintext highlighter-rouge">SplayTree_split()</code></li> <li><code class="language-plaintext highlighter-rouge">SplayTree_join()</code></li> <li><code class="language-plaintext highlighter-rouge">SplayTree_preorder()</code></li> <li><code class="language-plaintext highlighter-rouge">SplayTree_search()</code></li> </ul> <p>Comprehensive tests were added and I ensured that all of them passed.</p> <p>Next, I started working on implementing a <code class="language-plaintext highlighter-rouge">C++ backend for AVL Trees</code>. In this week, I implemented the following functions:</p> <ul> <li><code class="language-plaintext highlighter-rouge">AVLTree_left_height()</code></li> <li><code class="language-plaintext highlighter-rouge">AVLTree_right_height()</code></li> <li><code class="language-plaintext highlighter-rouge">AVLTree_balance_factor()</code></li> <li><code class="language-plaintext highlighter-rouge">AVLTree__right_rotate()</code></li> <li><code class="language-plaintext highlighter-rouge">AVLTree__left_right_rotate()</code></li> <li><code class="language-plaintext highlighter-rouge">AVLTree__right_left_rotate()</code></li> <li><code class="language-plaintext highlighter-rouge">AVLTree__left_rotate()</code></li> <li><code class="language-plaintext highlighter-rouge">AVLTree__balance_insertion()</code></li> <li><code class="language-plaintext highlighter-rouge">AVLTree_insert()</code></li> </ul> <h3 id="relevant-prs"><ins>Relevant PRs:</ins></h3> <p>PR for C++ backend for Splay Trees (merged): <a href="https://github.com/codezonediitj/pydatastructs/pull/562">#562</a></p> <p>PR for C++ backend for AVL Trees (work in progress): <a href="https://github.com/codezonediitj/pydatastructs/pull/564">#564</a></p> <p>In the following week, I will continue adding more functionality to the C++ backend of AVL Trees.</p> <h3 id="learningsdifficulties"><ins>Learnings/Difficulties</ins></h3> <p>Just one line: Patience and determination lead to resolution of bugs and segfaults.</p> <p><br/> Thanks to my mentor, <a href="https://github.com/czgdp1807">Gagandeep Singh</a>, for his support throughout.</p> <p>See you again after an amazing week! 😊</p>]]></content><author><name></name></author><category term="Weekly_Blogs"/><category term="GSoC&apos;24"/><summary type="html"><![CDATA[C++ backend for Splay Trees done! Started working on implementing a C++ backend for AVL Trees.]]></summary></entry><entry><title type="html">GSoC’24 Week 7</title><link href="https://kishanved.tech//blog/week7" rel="alternate" type="text/html" title="GSoC’24 Week 7"/><published>2024-06-23T00:00:00+00:00</published><updated>2024-06-23T00:00:00+00:00</updated><id>https://kishanved.tech//blog/week7</id><content type="html" xml:base="https://kishanved.tech//blog/week7"><![CDATA[<h5 id="june-17---june-23"><code class="language-plaintext highlighter-rouge">[June 17 - June 23]</code></h5> <h2 id="eat--sleep--code--repeat">Eat + Sleep + Code + Repeat!</h2> <hr/> <h3 id="coding-info"><ins>Coding info</ins></h3> <p>This week, I coded up the <code class="language-plaintext highlighter-rouge">C++ backend for Splay Trees</code>. The following methods were implemented:</p> <ul> <li><code class="language-plaintext highlighter-rouge">SplayTree__zig()</code></li> <li><code class="language-plaintext highlighter-rouge">SplayTree__zig_zig()</code></li> <li><code class="language-plaintext highlighter-rouge">SplayTree__zig_zag()</code></li> <li><code class="language-plaintext highlighter-rouge">SplayTree__zag_zag()</code></li> <li><code class="language-plaintext highlighter-rouge">SplayTree__zag_zig()</code></li> <li><code class="language-plaintext highlighter-rouge">SplayTree_splay()</code></li> <li><code class="language-plaintext highlighter-rouge">SplayTree_insert()</code></li> <li><code class="language-plaintext highlighter-rouge">SplayTree_delete()</code></li> </ul> <p>In case you find the names funny, just check out the code! They are all different functions with different roles, which are important for different insertions/deletions/algorithms in splay trees. (But I agree that the names sound funny 😀)</p> <h3 id="relevant-prs"><ins>Relevant PRs:</ins></h3> <p>PR for C++ backend for Splay Trees (work in progress): <a href="https://github.com/codezonediitj/pydatastructs/pull/562">#562</a></p> <p>In the following week, I will finish implementing Splay Trees in the C++ backend. Then, I will start making the C++ backend for the next tree data structure.</p> <h3 id="learningsdifficulties"><ins>Learnings/Difficulties</ins></h3> <p>I encountered some segmentation faults, and I used print statements to figure out the exact line where they occured. Used a little DSA here, did a binary search on the code to find the error :) .</p> <p><br/> Thanks to my mentor, <a href="https://github.com/czgdp1807">Gagandeep Singh</a>, for his support throughout.</p> <p>See you again after a productive week! 😊</p>]]></content><author><name></name></author><category term="Weekly_Blogs"/><category term="GSoC&apos;24"/><summary type="html"><![CDATA[Worked on C++ backend for Splay Trees for week 7 of my Google Summer of Code.]]></summary></entry><entry><title type="html">GSoC’24 Week 6</title><link href="https://kishanved.tech//blog/week6" rel="alternate" type="text/html" title="GSoC’24 Week 6"/><published>2024-06-16T00:00:00+00:00</published><updated>2024-06-16T00:00:00+00:00</updated><id>https://kishanved.tech//blog/week6</id><content type="html" xml:base="https://kishanved.tech//blog/week6"><![CDATA[<h5 id="june-10---june-16"><code class="language-plaintext highlighter-rouge">[June 10 - June 16]</code></h5> <h2 id="my-fingers-code-faster-than-i-can-think">My fingers code faster than I can think!</h2> <hr/> <h3 id="coding-info"><ins>Coding info</ins></h3> <p>In the first half of this week, I completed the <code class="language-plaintext highlighter-rouge">Red Black Trees</code> class. In the second half, I worked on <code class="language-plaintext highlighter-rouge">Binary Indexed Trees</code> (which can also be interpreted as <code class="language-plaintext highlighter-rouge">Fenwick Trees</code>).</p> <p>For Red Black Trees, the following methods have been implemented in the C++ backend, and tested exhaustively:</p> <ul> <li><code class="language-plaintext highlighter-rouge">insert()</code> <ul> <li><code class="language-plaintext highlighter-rouge">_get_parent()</code></li> <li><code class="language-plaintext highlighter-rouge">_get_grand_parent()</code></li> <li><code class="language-plaintext highlighter-rouge">_get_sibling()</code></li> <li><code class="language-plaintext highlighter-rouge">_get_uncle()</code></li> <li><code class="language-plaintext highlighter-rouge">_is_onleft()</code></li> <li><code class="language-plaintext highlighter-rouge">_is_onright()</code></li> <li><code class="language-plaintext highlighter-rouge">__fix_insert()</code></li> </ul> </li> <li><code class="language-plaintext highlighter-rouge">delete()</code> <ul> <li><code class="language-plaintext highlighter-rouge">_find_predecessor()</code></li> <li><code class="language-plaintext highlighter-rouge">_transplant_values()</code></li> <li><code class="language-plaintext highlighter-rouge">_has_one_child()</code></li> <li><code class="language-plaintext highlighter-rouge">_is_leaf()</code></li> <li><code class="language-plaintext highlighter-rouge">_has_two_child()</code></li> <li><code class="language-plaintext highlighter-rouge">__has_red_child()</code></li> <li><code class="language-plaintext highlighter-rouge">_replace_node()</code></li> <li><code class="language-plaintext highlighter-rouge">__walk1_walk_isblack()</code></li> <li><code class="language-plaintext highlighter-rouge">__left_left_siblingcase()</code></li> <li><code class="language-plaintext highlighter-rouge">__right_left_siblingcase()</code></li> <li><code class="language-plaintext highlighter-rouge">__left_right_siblingcase()</code></li> <li><code class="language-plaintext highlighter-rouge">__right_right_siblingcase()</code></li> <li><code class="language-plaintext highlighter-rouge">__fix_deletion()</code></li> <li><code class="language-plaintext highlighter-rouge">_remove_node()</code></li> <li><code class="language-plaintext highlighter-rouge">_delete_root()</code></li> <li><code class="language-plaintext highlighter-rouge">__leaf_case()</code></li> <li><code class="language-plaintext highlighter-rouge">__one_child_case()</code></li> <li><code class="language-plaintext highlighter-rouge">__two_child_case()</code></li> </ul> </li> <li>All tree traversals (<strong>OOPS concepts used to resuse code</strong>)</li> </ul> <p>For Binary Indexed Trees, I’ve implemented the following methods in the C++ backend:</p> <ul> <li><code class="language-plaintext highlighter-rouge">update()</code></li> <li><code class="language-plaintext highlighter-rouge">get_prefix_sum()</code></li> <li><code class="language-plaintext highlighter-rouge">get_sum()</code></li> </ul> <h3 id="relevant-prs"><ins>Relevant PRs:</ins></h3> <p>PR for RedBlackTrees (merged): <a href="https://github.com/codezonediitj/pydatastructs/pull/560">#560</a></p> <p>PR for BinaryIndexedTrees (merged): <a href="https://github.com/codezonediitj/pydatastructs/pull/561">#561</a></p> <p>In the following week, I will implement Splay Trees in the C++ backend.</p> <h3 id="learningsdifficulties"><ins>Learnings/Difficulties</ins></h3> <p>Everything is now going smoothly! My fingers code faster than I can think! I’ve understood the process and now become good at it, yay.</p> <p><br/> Thanks to my mentor, <a href="https://github.com/czgdp1807">Gagandeep Singh</a>, for his support throughout.</p> <p>See you again after an amazing week! 😊</p>]]></content><author><name></name></author><category term="Weekly_Blogs"/><category term="GSoC&apos;24"/><summary type="html"><![CDATA[Red Black Trees and Binary Indexed Trees completed!]]></summary></entry><entry><title type="html">GSoC’24 Week 5</title><link href="https://kishanved.tech//blog/week5" rel="alternate" type="text/html" title="GSoC’24 Week 5"/><published>2024-06-09T00:00:00+00:00</published><updated>2024-06-09T00:00:00+00:00</updated><id>https://kishanved.tech//blog/week5</id><content type="html" xml:base="https://kishanved.tech//blog/week5"><![CDATA[<h5 id="june-03---june-09"><code class="language-plaintext highlighter-rouge">[June 03 - June 09]</code></h5> <h2 id="pycon24-proposal-submitted-and-self-balancing-binary-trees-done">PyCon’24 proposal submitted and Self Balancing Binary Trees done!</h2> <hr/> <h3 id="coding-info"><ins>Coding info</ins></h3> <p>This week, I started and completed the C++ backend for Self Balancing Binary Tree class. The methods are:</p> <ul> <li><code class="language-plaintext highlighter-rouge">left_rotate()</code></li> <li><code class="language-plaintext highlighter-rouge">right_rotate()</code></li> <li><code class="language-plaintext highlighter-rouge">left_right_rotate()</code></li> <li><code class="language-plaintext highlighter-rouge">right_left_rotate()</code></li> </ul> <p>Along with this, <strong>I submitted my proposal for a talk at PyCon’24</strong>. If accepted, I will be presenting my work done in PyDataStructs as a part of Google Summer of Code 2024 at PyCon 2024, Bengaluru. Sounds exciting!</p> <p>PyCon’24 Proposal: <a href="https://in.pycon.org/cfp/2024/proposals/unleashing-pythons-power-lightning-fast-speed-with-a-c-backend~erkXw/">Unleashing Python’s Power: Lightning-fast speed with a C++ Backend</a></p> <p>Slides for the talk: <a href="https://drive.google.com/file/d/1K2DjwfJOrBZaMIlv5abQHZR0jxxO2yBE/view">Link</a></p> <p>Moreover, I started working on <code class="language-plaintext highlighter-rouge">RedBlackTrees</code> class. I have finished all helper methods for insert() and the <code class="language-plaintext highlighter-rouge">insert()</code> method, which passes all the test cases and works correctly for all different conditions.</p> <p>I have added support for all tree traversals to the RedBlackTree class. These include:</p> <ul> <li><code class="language-plaintext highlighter-rouge">pre_order</code></li> <li><code class="language-plaintext highlighter-rouge">in_order</code></li> <li><code class="language-plaintext highlighter-rouge">post_order</code></li> <li><code class="language-plaintext highlighter-rouge">out_order</code></li> <li><code class="language-plaintext highlighter-rouge">depth_first_search</code></li> <li><code class="language-plaintext highlighter-rouge">breadth_first_search</code></li> </ul> <p><strong>OOPS concepts used greatly helped here. I can reuse the base code written for tree traversals in any tree data structure.</strong></p> <h3 id="relevant-prs"><ins>Relevant PRs:</ins></h3> <p>PR for Self Balancing Binary Trees (which has been merged): <a href="https://github.com/codezonediitj/pydatastructs/pull/559">#559</a></p> <p>PR for RedBlackTrees (work in progress): <a href="https://github.com/codezonediitj/pydatastructs/pull/560">#560</a></p> <p>In the following week, I will continue working on the <code class="language-plaintext highlighter-rouge">RedBlackTree</code> class and add more functionality to its C++ backend. It includes methods like <code class="language-plaintext highlighter-rouge">delete()</code> and various helper methods required to handle all cases of deleting from the RedBlackTree. Following this, I will start implementing the next tree data structure: Binary Indexed Trees and it’s algorithms.</p> <h3 id="learningsdifficulties"><ins>Learnings/Difficulties</ins></h3> <p>This week, I felt confident and coded really fast, but at the same time, I ensured that the quality of code was not compromized. I have now learned to identify possible bugs and segfaults at the time of writing code itself, this has greatly increased my efficiency. I have mastered OOPS concepts and they have helped me greatly. For example, I can reuse the base code written for tree traversals in any tree data structure!</p> <p>I also learned to make an amazing proposal for a talk at PyCon’24 and prepared an outline for a talk of 30 minutes, with slides, to present at the conference.</p> <p><br/> Thanks to my mentor, <a href="https://github.com/czgdp1807">Gagandeep Singh</a>, for wonderful guidance for GSoC and helping me design an amazing talk for PyCon’24.</p> <p>See you again after a productive week! 😊</p>]]></content><author><name></name></author><category term="Weekly_Blogs"/><category term="GSoC&apos;24"/><summary type="html"><![CDATA[PyCon'24 proposal submitted and Self Balancing Binary Trees done!]]></summary></entry><entry><title type="html">PyCon 2024 Proposal</title><link href="https://kishanved.tech//blog/PyCon_proposal" rel="alternate" type="text/html" title="PyCon 2024 Proposal"/><published>2024-06-06T00:00:00+00:00</published><updated>2024-06-06T00:00:00+00:00</updated><id>https://kishanved.tech//blog/PyCon_proposal</id><content type="html" xml:base="https://kishanved.tech//blog/PyCon_proposal"><![CDATA[<h1 id="unleashing-pythons-power-lightning-fast-speed-with-a-c-backend">Unleashing Python’s Power: Lightning-fast speed with a C++ Backend</h1> <hr/> <h3 id="abstract">Abstract</h3> <p>Python is an amazing programming language, because of it’s simplicity, productivity and versatile ecosystem. However, when it comes to performance-critical tasks and numerical computing, the trade-off between ease of use and execution becomes a challenge. The solution to this: add a C++ backend! This retains all of Python’s amazing functionality in the frontend and harnesses the lightning fast execution speed of C++. Experience the process of accelerating any Python code by adding a C++ backend.</p> <h3 id="description">Description</h3> <p>PyDataStructs is an open source Python package for various data structures and algorithms, including their parallel implementations. As a part of Google Summer of Code 2024, I worked on adding a C++ backend for different tree data structures and their algorithms in PyDataStructs. This has greatly enhanced the speed of execution, making it 5-8 times faster. I have done this by extending Python with C++ using the Python C API. This allows the user to work in the simple and easy to understand Python frontend, while all the execution takes place in the C++ backend. The talk showcases the power of extending Python with C++ and provides an easy to understand demonstration of the same.</p> <p><strong>Outline of the talk</strong></p> <ul> <li>Introduction (2 minutes) <ul> <li>Welcome and a brief introduction of the speaker.</li> <li>Overview of the talk’s agenda and what the attendees can expect to learn.</li> </ul> </li> <li>What is PyDataStructs? (2 minutes) <ul> <li>Explaining PyDataStructs as an open source Python package for data structures and algorithms.</li> </ul> </li> <li>My contributions to PyDataStructs (1 minute) <ul> <li>A brief introduction of my work in Google Summer of Code 2024.</li> </ul> </li> <li>Speed benchmarks (1 minute) <ul> <li>Presenting performance benchmarks comparing Python and Python with a C++ backend.</li> </ul> </li> <li>Explaining the process of adding a C++ backend (an easy to understand example code will be used to support the points that follow) <ul> <li>Explaining what the example code’s objective is and showing the Python code. (1 minute)</li> <li>Introduction to Python C API (1 minute)</li> <li>Explaining how custom types are created (1 minute)</li> <li>Explaining how methods are defined (1 minute)</li> <li>Explaining how members are defined (1 minute)</li> <li>Explaining how memory is allocated and deallocated for custom types (1 minute)</li> <li>Explaining pointer reference: counting, increasing and decreasing (1 minute)</li> <li>Introducing setuptools and demonstrating how to build the module (1 minute)</li> <li>Comparing the performance of the C++ backend against only Python code for this example. (1 minute)</li> </ul> </li> <li>Demonstrating the C++ backend in PyDataStructs (4 minutes) <ul> <li>Showcasing how this has been done for an entire Python package.</li> <li>Demonstrating how OOPS concepts can be used in this.</li> <li>Exhibiting how the user can change the backend to C++ (from regular Python)</li> </ul> </li> <li>Conclusion and Takeaways (2 minutes) <ul> <li>Summarizing the key points covered in the talk.</li> <li>Encouraging attendees to extend their Python codes/packages with C++ by using the Python C API.</li> </ul> </li> <li>Q&amp;A session (5 minutes) <ul> <li>Allowing attendees to ask questions related to Python C API and PyDataStructs.</li> <li>Engaging in discussions and providing clarifications as needed.</li> </ul> </li> <li>Closing Remarks (1 minute) <ul> <li>Extending gratitude to the audience for their participation.</li> <li>Sharing contact information and additional resources for further exploration.</li> </ul> </li> </ul> <p><strong>Expected Takeaways</strong> Attendees will walk away with a comprehensive understanding of Python C API’s capabilities, its role in enhancing Python’s performance, and the practical steps to extend their Python projects with C/C++. They will be inspired to leverage the strengths of adding a C++ backend for amazingly fast computations without sacrificing Python’s user-friendly features.</p> <h3 id="speaker-information">Speaker information</h3> <p>Kishan Ved is a third year student at the Indian Institute of Technology Gandhinagar, India. He is pursuing a B.Tech degree in Computer Science and Engineering.</p> <p>Kishan has contributed to Google Summer of Code 2024. He has developed open source software for NumFOCUS organization’s project: PyDataStructs.</p> <p>Being the Head Boy of his school, he has delivered a speech in a stadium, to an audience of 1000+ people, on the annual sports day. Here is a clip from the speech: <a href="https://drive.google.com/file/d/1RtK_JPUGxIGHPMCT-JAw43ca922g0unf/view?usp=sharing">https://drive.google.com/file/d/1RtK_JPUGxIGHPMCT-JAw43ca922g0unf/view?usp=sharing</a></p> <h3 id="pre-requisites">Pre-requisites</h3> <p>Basic knowledge of Python. A brief idea about C++ would be helpful (though not an absolute necessity).</p> <h3 id="content-urls">Content URLs</h3> <p>PyDataStructs: Website: <a href="https://pydatastructs.readthedocs.io/en/stable/">https://pydatastructs.readthedocs.io/en/stable/</a></p> <p>PyDataStructs: GitHub: <a href="https://github.com/codezonediitj/pydatastructs">https://github.com/codezonediitj/pydatastructs</a></p> <p>Slides: <a href="https://drive.google.com/file/d/1K2DjwfJOrBZaMIlv5abQHZR0jxxO2yBE/view?usp=sharing">https://drive.google.com/file/d/1K2DjwfJOrBZaMIlv5abQHZR0jxxO2yBE/view?usp=sharing</a></p> <p>An example code will be used for explanation, as mentioned in the outline of the talk.</p> <h3 id="speaker-links">Speaker links</h3> <p>GitHub: <a href="https://github.com/Kishan-Ved">https://github.com/Kishan-Ved</a></p> <p>Google Summer of Code Blogs: <a href="https://kishanved.tech/blog/">https://kishanved.tech/blog/</a></p> <p>Email: kishanved123456@gmail.com</p> <p>LinkedIn: <a href="https://www.linkedin.com/in/kishan-ved-506140259/">https://www.linkedin.com/in/kishan-ved-506140259/</a></p>]]></content><author><name></name></author><category term="GSoC&apos;24"/><category term="PyCon&apos;24"/><summary type="html"><![CDATA[My proposal for PyCon 2024, Bengaluru. Related to my work done in PyDataStructs during GSoC 2024.]]></summary></entry><entry><title type="html">GSoC’24 Week 4</title><link href="https://kishanved.tech//blog/week4" rel="alternate" type="text/html" title="GSoC’24 Week 4"/><published>2024-06-02T00:00:00+00:00</published><updated>2024-06-02T00:00:00+00:00</updated><id>https://kishanved.tech//blog/week4</id><content type="html" xml:base="https://kishanved.tech//blog/week4"><![CDATA[<h5 id="may-27---june-02"><code class="language-plaintext highlighter-rouge">[May 27 - June 02]</code></h5> <h2 id="all-binarysearchtree-methods-and-all-tree-traversals-done-amazing-speed-results">All BinarySearchTree methods and all tree traversals done! Amazing speed results!</h2> <hr/> <h3 id="coding-info"><ins>Coding info</ins></h3> <p>This week, I completed all the methods of BinarySearchTree class. All of them can now be accessed in the C++ backend. This gives BinarySearchTree’s C++ backend the complete functionality. The methods are:</p> <ul> <li><code class="language-plaintext highlighter-rouge">delete()</code></li> <li><code class="language-plaintext highlighter-rouge">_simple_path()</code></li> <li><code class="language-plaintext highlighter-rouge">lower_bound</code></li> <li><code class="language-plaintext highlighter-rouge">upper_bound</code></li> <li><code class="language-plaintext highlighter-rouge">lowest common ancestor algorithm 1</code></li> <li><code class="language-plaintext highlighter-rouge">lowest common ancestor algorithm 2</code></li> <li><code class="language-plaintext highlighter-rouge">rank()</code></li> <li><code class="language-plaintext highlighter-rouge">select()</code></li> <li><code class="language-plaintext highlighter-rouge">str()</code></li> </ul> <p>Along with this, I also added all traversals in the BinaryTreeTraversal class. These include:</p> <ul> <li><code class="language-plaintext highlighter-rouge">pre_order</code></li> <li><code class="language-plaintext highlighter-rouge">in_order</code></li> <li><code class="language-plaintext highlighter-rouge">post_order</code></li> <li><code class="language-plaintext highlighter-rouge">out_order</code></li> <li><code class="language-plaintext highlighter-rouge">depth_first_search</code></li> <li><code class="language-plaintext highlighter-rouge">breadth_first_search</code></li> </ul> <h3 id="i-am-speed"><ins>I am speed!!!</ins></h3> <p>Now that I have completed the BinarySearchTree class, I decided to test it’s speed against the existing Python implementation and the results were amazing!!! <code class="language-plaintext highlighter-rouge">My implementations in the C++ backend are 6-8 times faster than the Python backend</code>.</p> <p>Here’s a benchmark test:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">test_BinarySearchTree</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="n">cpp</span> <span class="o">=</span> <span class="n">Backend</span><span class="p">.</span><span class="n">CPP</span>
    <span class="n">repeat</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">number</span> <span class="o">=</span> <span class="mi">1</span>

    <span class="n">size</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">PYDATASTRUCTS_BENCHMARK_SIZE</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">1000</span><span class="sh">"</span><span class="p">))</span>
    <span class="n">size</span> <span class="o">=</span> <span class="n">kwargs</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">size</span><span class="sh">"</span><span class="p">,</span> <span class="n">size</span><span class="p">)</span>

    <span class="n">BST</span> <span class="o">=</span> <span class="n">BinarySearchTree</span>
    <span class="n">b1</span> <span class="o">=</span> <span class="nc">BST</span><span class="p">(</span><span class="n">backend</span><span class="o">=</span><span class="n">Backend</span><span class="p">.</span><span class="n">PYTHON</span><span class="p">)</span>
    <span class="n">b2</span> <span class="o">=</span> <span class="nc">BST</span><span class="p">(</span><span class="n">backend</span><span class="o">=</span><span class="n">Backend</span><span class="p">.</span><span class="n">CPP</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">backend</span><span class="p">,</span> <span class="n">tree</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="o">-</span><span class="mi">1000</span><span class="p">,</span><span class="mi">1000</span><span class="p">):</span>
            <span class="n">tree</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">node</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">g</span><span class="p">(</span><span class="n">backend</span><span class="p">,</span> <span class="n">tree</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="o">-</span><span class="mi">1000</span><span class="p">,</span> <span class="mi">1000</span><span class="p">):</span>
            <span class="n">tree</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">h</span><span class="p">(</span><span class="n">backend</span><span class="p">,</span> <span class="n">tree</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">2000</span><span class="p">):</span>
            <span class="n">tree</span><span class="p">.</span><span class="nf">delete</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>

    <span class="n">kwds_dict_PY</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">backend</span><span class="sh">"</span><span class="p">:</span> <span class="n">Backend</span><span class="p">.</span><span class="n">PYTHON</span><span class="p">,</span> <span class="sh">"</span><span class="s">tree</span><span class="sh">"</span><span class="p">:</span><span class="n">b1</span><span class="p">}</span>
    <span class="n">kwds_dict_CPP</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">backend</span><span class="sh">"</span><span class="p">:</span> <span class="n">Backend</span><span class="p">.</span><span class="n">CPP</span><span class="p">,</span> <span class="sh">"</span><span class="s">tree</span><span class="sh">"</span><span class="p">:</span><span class="n">b2</span><span class="p">}</span>

    <span class="n">timer_python</span> <span class="o">=</span> <span class="n">timeit</span><span class="p">.</span><span class="nc">Timer</span><span class="p">(</span><span class="n">functools</span><span class="p">.</span><span class="nf">partial</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="o">**</span><span class="n">kwds_dict_PY</span><span class="p">))</span>
    <span class="n">python_insert</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">timer_python</span><span class="p">.</span><span class="nf">repeat</span><span class="p">(</span><span class="n">repeat</span><span class="p">,</span> <span class="n">number</span><span class="p">))</span>

    <span class="n">timer_cpp</span> <span class="o">=</span> <span class="n">timeit</span><span class="p">.</span><span class="nc">Timer</span><span class="p">(</span><span class="n">functools</span><span class="p">.</span><span class="nf">partial</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="o">**</span><span class="n">kwds_dict_CPP</span><span class="p">))</span>
    <span class="n">cpp_insert</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">timer_cpp</span><span class="p">.</span><span class="nf">repeat</span><span class="p">(</span><span class="n">repeat</span><span class="p">,</span> <span class="n">number</span><span class="p">))</span>
    <span class="k">assert</span> <span class="n">cpp_insert</span> <span class="o">&lt;</span> <span class="n">python_insert</span>

    <span class="n">timer_python</span> <span class="o">=</span> <span class="n">timeit</span><span class="p">.</span><span class="nc">Timer</span><span class="p">(</span><span class="n">functools</span><span class="p">.</span><span class="nf">partial</span><span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="o">**</span><span class="n">kwds_dict_PY</span><span class="p">))</span>
    <span class="n">python_search</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">timer_python</span><span class="p">.</span><span class="nf">repeat</span><span class="p">(</span><span class="n">repeat</span><span class="p">,</span> <span class="n">number</span><span class="p">))</span>

    <span class="n">timer_cpp</span> <span class="o">=</span> <span class="n">timeit</span><span class="p">.</span><span class="nc">Timer</span><span class="p">(</span><span class="n">functools</span><span class="p">.</span><span class="nf">partial</span><span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="o">**</span><span class="n">kwds_dict_CPP</span><span class="p">))</span>
    <span class="n">cpp_search</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">timer_cpp</span><span class="p">.</span><span class="nf">repeat</span><span class="p">(</span><span class="n">repeat</span><span class="p">,</span> <span class="n">number</span><span class="p">))</span>
    <span class="k">assert</span> <span class="n">cpp_search</span> <span class="o">&lt;</span> <span class="n">python_search</span>

    <span class="n">timer_python</span> <span class="o">=</span> <span class="n">timeit</span><span class="p">.</span><span class="nc">Timer</span><span class="p">(</span><span class="n">functools</span><span class="p">.</span><span class="nf">partial</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="o">**</span><span class="n">kwds_dict_PY</span><span class="p">))</span>
    <span class="n">python_delete</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">timer_python</span><span class="p">.</span><span class="nf">repeat</span><span class="p">(</span><span class="n">repeat</span><span class="p">,</span> <span class="n">number</span><span class="p">))</span>

    <span class="n">timer_cpp</span> <span class="o">=</span> <span class="n">timeit</span><span class="p">.</span><span class="nc">Timer</span><span class="p">(</span><span class="n">functools</span><span class="p">.</span><span class="nf">partial</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="o">**</span><span class="n">kwds_dict_CPP</span><span class="p">))</span>
    <span class="n">cpp_delete</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">timer_cpp</span><span class="p">.</span><span class="nf">repeat</span><span class="p">(</span><span class="n">repeat</span><span class="p">,</span> <span class="n">number</span><span class="p">))</span>
    <span class="k">assert</span> <span class="n">cpp_delete</span> <span class="o">&lt;</span> <span class="n">python_delete</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Python Time:</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">insert(): </span><span class="sh">"</span><span class="p">,</span><span class="n">python_insert</span><span class="p">,</span><span class="sh">"</span><span class="s">s</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">search(): </span><span class="sh">"</span><span class="p">,</span><span class="n">python_search</span><span class="p">,</span><span class="sh">"</span><span class="s">s</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">delete(): </span><span class="sh">"</span><span class="p">,</span><span class="n">python_delete</span><span class="p">,</span><span class="sh">"</span><span class="s">s</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">python_total</span> <span class="o">=</span> <span class="n">python_insert</span><span class="o">+</span><span class="n">python_search</span><span class="o">+</span><span class="n">python_delete</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Total Python time: </span><span class="sh">"</span><span class="p">,</span> <span class="n">python_total</span><span class="p">,</span><span class="sh">"</span><span class="s">s</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">C++ Time:</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">insert(): </span><span class="sh">"</span><span class="p">,</span><span class="n">cpp_insert</span><span class="p">,</span><span class="sh">"</span><span class="s">s</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">search(): </span><span class="sh">"</span><span class="p">,</span><span class="n">cpp_search</span><span class="p">,</span><span class="sh">"</span><span class="s">s</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">delete(): </span><span class="sh">"</span><span class="p">,</span><span class="n">cpp_delete</span><span class="p">,</span><span class="sh">"</span><span class="s">s</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">cpp_total</span> <span class="o">=</span> <span class="n">cpp_insert</span><span class="o">+</span><span class="n">cpp_search</span><span class="o">+</span><span class="n">cpp_delete</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Total C++ time: </span><span class="sh">"</span><span class="p">,</span> <span class="n">cpp_total</span><span class="p">,</span><span class="sh">"</span><span class="s">s</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">C++ backend is</span><span class="sh">"</span><span class="p">,</span><span class="nf">round</span><span class="p">(</span><span class="n">python_total</span><span class="o">/</span><span class="n">cpp_total</span><span class="p">),</span><span class="sh">"</span><span class="s">times faster!</span><span class="sh">"</span><span class="p">)</span>
    
<span class="nf">test_BinarySearchTree</span><span class="p">()</span>
</code></pre></div></div> <p>Output:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Python Time:
insert():  7.025027044000126 s
search():  3.316694295000161 s
delete():  3.271200282000109 s
Total Python time:  13.612921621000396 s

C++ Time:
insert():  0.9178718929999832 s
search():  0.43746472500015443 s
delete():  0.7311443830001281 s
Total C++ time:  2.0864810010002657 s

C++ backend is 7 times faster!
</code></pre></div></div> <h3 id="relevant-prs"><ins>Relevant PRs:</ins></h3> <p>I worked on the PR: <a href="https://github.com/codezonediitj/pydatastructs/pull/556">#556</a></p> <p>There have been a plethora of commits to this PR. Commits of this week focused on adding all the methods and completing the BinarySearchTree class, adding all traversals and adding benchmark tests.</p> <p>In the following week, I will work on <code class="language-plaintext highlighter-rouge">SelfBalancingBinaryTree</code> class and add all its functionality in the C++ backend. It includes methods like <code class="language-plaintext highlighter-rouge">_right_rotate()</code>, <code class="language-plaintext highlighter-rouge">_left_rotate</code>, <code class="language-plaintext highlighter-rouge">_left_right_rotate</code> and <code class="language-plaintext highlighter-rouge">_right_left_rotate</code>. Hence, it serves as the base class for AVL Trees, Cartesian Trees, Splay Trees and Red Black Trees.</p> <h3 id="learningsdifficulties"><ins>Learnings/Difficulties</ins></h3> <p>This week was amazing, I was busy working and I achieved several goals! I faced some difficulty specific to the Python-C API, and I spent time referring to its documentation. After hours of reading the documentation, I finally figured out the solution! This taught me the importance to document work and read the documentation (something that most enthusiastic coders like me skip).</p> <p><br/> Thanks to my mentor, <a href="https://github.com/czgdp1807">Gagandeep Singh</a>, for guiding me whenever requested.</p> <p>See you again after amazing 7 days! 😊</p>]]></content><author><name></name></author><category term="Weekly_Blogs"/><category term="GSoC&apos;24"/><summary type="html"><![CDATA[All BinarySearchTree methods and all tree traversals done! Amazing speed results!]]></summary></entry><entry><title type="html">GSoC’24 Week 3</title><link href="https://kishanved.tech//blog/week3" rel="alternate" type="text/html" title="GSoC’24 Week 3"/><published>2024-05-26T00:00:00+00:00</published><updated>2024-05-26T00:00:00+00:00</updated><id>https://kishanved.tech//blog/week3</id><content type="html" xml:base="https://kishanved.tech//blog/week3"><![CDATA[<h5 id="may-19---may-26"><code class="language-plaintext highlighter-rouge">[May 19 - May 26]</code></h5> <h2 id="test-debug-code-advance--binary-search-tree-insert-and-search">Test, Debug, Code, Advance! + Binary Search Tree <code class="language-plaintext highlighter-rouge">insert()</code> and <code class="language-plaintext highlighter-rouge">search()</code></h2> <hr/> <h3 id="coding-info"><ins>Coding info</ins></h3> <p>I have several updates this week! I tested my code for the C++ backend of class: Node, TreeNode, ArrayForTrees and BinaryTree. There were a few bugs and Segmentation Faults, but I successfully managed to fix all of them 🙂 ! This week, I also worked on <code class="language-plaintext highlighter-rouge">search()</code> and <code class="language-plaintext highlighter-rouge">insert()</code> functions of a new class: BinarySearchTree.</p> <h3 id="whats-working"><ins>What’s working</ins></h3> <p>As its been 3 weeks of my GSoC, I proudly present to you everything that I have done till now, and tested for correctness. Here’s the working product of the <code class="language-plaintext highlighter-rouge">1100 lines of code</code> that I wrote till now:</p> <p>TreeNode C++ backend test:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">test_cpp_TreeNode</span><span class="p">():</span>
    <span class="n">n</span> <span class="o">=</span> <span class="nc">TreeNode</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="n">backend</span><span class="o">=</span><span class="n">Backend</span><span class="p">.</span><span class="n">CPP</span><span class="p">)</span>
    <span class="k">assert</span> <span class="nf">str</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">(None, 1, 100, None)</span><span class="sh">"</span>
</code></pre></div></div> <p>BinaryTrees C++ backend test:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">test_cpp_BinaryTree</span><span class="p">():</span>
    <span class="n">b</span> <span class="o">=</span> <span class="nc">BinaryTree</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="n">backend</span><span class="o">=</span><span class="n">Backend</span><span class="p">.</span><span class="n">CPP</span><span class="p">)</span>
    <span class="k">assert</span> <span class="nf">raises</span><span class="p">(</span><span class="nb">NotImplementedError</span><span class="p">,</span> <span class="n">b</span><span class="p">.</span><span class="n">insert</span><span class="p">)</span> <span class="c1"># Correctly throws NotImplementedError: This is an abstract method
</span>    <span class="k">assert</span> <span class="nf">raises</span><span class="p">(</span><span class="nb">NotImplementedError</span><span class="p">,</span> <span class="n">b</span><span class="p">.</span><span class="n">delete</span><span class="p">)</span> <span class="c1"># Correctly throws NotImplementedError: This is an abstract method
</span>    <span class="k">assert</span> <span class="nf">raises</span><span class="p">(</span><span class="nb">NotImplementedError</span><span class="p">,</span> <span class="n">b</span><span class="p">.</span><span class="n">search</span><span class="p">)</span> <span class="c1"># Correctly throws NotImplementedError: This is an abstract method
</span>    <span class="k">assert</span> <span class="nf">str</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">[(None, 1, 100, None)]</span><span class="sh">"</span>
</code></pre></div></div> <p>ArrayForTrees C++ backend test:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">test_cpp_ArrayForTrees</span><span class="p">():</span>
    <span class="kn">from</span> <span class="n">pydatastructs.linear_data_structures._backend.cpp</span> <span class="kn">import</span> <span class="n">_arrays</span>
    <span class="kn">from</span> <span class="n">pydatastructs.utils._backend.cpp</span> <span class="kn">import</span> <span class="n">_nodes</span>
    <span class="n">AFT</span> <span class="o">=</span> <span class="n">_arrays</span><span class="p">.</span><span class="n">ArrayForTrees</span>
    <span class="n">root</span> <span class="o">=</span> <span class="nc">TreeNode</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="n">backend</span><span class="o">=</span><span class="n">Backend</span><span class="p">.</span><span class="n">CPP</span><span class="p">)</span>
    <span class="n">A</span> <span class="o">=</span> <span class="nc">AFT</span><span class="p">(</span><span class="n">_nodes</span><span class="p">.</span><span class="n">TreeNode</span><span class="p">,</span> <span class="p">[</span><span class="n">root</span><span class="p">])</span>
    <span class="k">assert</span> <span class="nf">str</span><span class="p">(</span><span class="n">A</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">[</span><span class="sh">'</span><span class="s">(None, 1, 100, None)</span><span class="sh">'</span><span class="s">]</span><span class="sh">"</span>
    <span class="n">node</span> <span class="o">=</span> <span class="nc">TreeNode</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="n">backend</span><span class="o">=</span><span class="n">Backend</span><span class="p">.</span><span class="n">CPP</span><span class="p">)</span>
    <span class="n">A</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
    <span class="k">assert</span> <span class="nf">str</span><span class="p">(</span><span class="n">A</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">[</span><span class="sh">'</span><span class="s">(None, 1, 100, None)</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">(None, 2, 200, None)</span><span class="sh">'</span><span class="s">]</span><span class="sh">"</span>
</code></pre></div></div> <p>BinarySearchTree C++ backend test: (This is still a work in progress)</p> <p><code class="language-plaintext highlighter-rouge">search()</code></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">test_cpp_BinarySearchTree_search</span><span class="p">():</span>
    <span class="n">b</span> <span class="o">=</span> <span class="nc">BinarySearchTree</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span> <span class="n">backend</span><span class="o">=</span><span class="n">Backend</span><span class="p">.</span><span class="n">CPP</span><span class="p">)</span>
    <span class="k">assert</span> <span class="nf">str</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">[(None, 1, 100, None)]</span><span class="sh">"</span>
    <span class="k">assert</span> <span class="n">b</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span>
    <span class="k">assert</span> <span class="n">b</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">parent</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span>
    <span class="k">assert</span> <span class="n">b</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">parent</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="o">==</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">insert()</code></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">test_cpp_BinarySearchTree_insert</span><span class="p">():</span>
    <span class="n">BST</span> <span class="o">=</span> <span class="n">BinarySearchTree</span>
    <span class="n">b</span> <span class="o">=</span> <span class="nc">BST</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="n">backend</span><span class="o">=</span><span class="n">Backend</span><span class="p">.</span><span class="n">CPP</span><span class="p">)</span>
    <span class="n">b</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
    <span class="n">b</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
    <span class="n">b</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">b</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span>
    <span class="n">b</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
    <span class="n">b</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">7</span><span class="p">)</span>
    <span class="n">b</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span> <span class="mi">14</span><span class="p">)</span>
    <span class="n">b</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span> <span class="mi">13</span><span class="p">)</span>
    <span class="k">assert</span> <span class="nf">str</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="o">==</span> \
    <span class="p">(</span><span class="sh">"</span><span class="s">[(1, 8, 8, 2), (3, 3, 3, 4), (None, 10, 10, 7), (None, 1, 1, None), </span><span class="sh">"</span>
    <span class="sh">"</span><span class="s">(5, 6, 6, 6), (None, 4, 4, None), (None, 7, 7, None), (8, 14, 14, None), </span><span class="sh">"</span>
    <span class="sh">"</span><span class="s">(None, 13, 13, None)]</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <h3 id="relevant-prs"><ins>Relevant PRs:</ins></h3> <p>I worked on the PR: <a href="https://github.com/codezonediitj/pydatastructs/pull/556">#556</a></p> <p>There have been a plethora of commits to this PR. Commits of this week focused on testing my implementations in class Node, TreeNode, ArrayForTrees, BinaryTree and adding the BinarySearchTree class methods: <code class="language-plaintext highlighter-rouge">insert()</code> and <code class="language-plaintext highlighter-rouge">search()</code>.</p> <p>Here is the progress tracker for the next few weeks: <a href="https://github.com/codezonediitj/pydatastructs/issues/554">#554</a></p> <p>In the following week, I will add more functionality to the BinarySearchTree class. This includes methods like <code class="language-plaintext highlighter-rouge">delete()</code>, <code class="language-plaintext highlighter-rouge">upper_bound()</code>, <code class="language-plaintext highlighter-rouge">lower_bound()</code>, <code class="language-plaintext highlighter-rouge">lowest_common_ancestor()</code> and many more!</p> <h3 id="learningsdifficulties"><ins>Learnings/Difficulties</ins></h3> <p>Most importantly, this week taught me to persevere, and brainstorm to fix every segmentation fault encountered. I learned to be patient and trust the process, and this was truely rewarding!</p> <p><br/> I am grateful to my mentor, <a href="https://github.com/czgdp1807">Gagandeep Singh</a>, for helping me whenever requested.</p> <p>See you again after productive 7 days! :)</p>]]></content><author><name></name></author><category term="Weekly_Blogs"/><category term="GSoC&apos;24"/><summary type="html"><![CDATA[Test, Debug, Code, Advance! + Binary Search Tree insert() and search()]]></summary></entry><entry><title type="html">GSoC’24 Week 2</title><link href="https://kishanved.tech//blog/week2" rel="alternate" type="text/html" title="GSoC’24 Week 2"/><published>2024-05-19T00:00:00+00:00</published><updated>2024-05-19T00:00:00+00:00</updated><id>https://kishanved.tech//blog/week2</id><content type="html" xml:base="https://kishanved.tech//blog/week2"><![CDATA[<h5 id="may-12---may-19"><code class="language-plaintext highlighter-rouge">[May 12 - May 19]</code></h5> <h2 id="c-backend-for-node-treenode-and-arrayfortrees">C++ backend for Node, TreeNode and ArrayForTrees</h2> <hr/> <h3 id="coding-info"><ins>Coding info</ins></h3> <p>In my second week of GSoC, I have worked on coding up the C++ backend for 3 classes: Node, TreeNode and ArrayForTrees. The backend follows the structure in their Python implementations. These C++ classes’ objects can now be called in the Binary Trees class.</p> <h3 id="relevant-prs"><ins>Relevant PRs:</ins></h3> <p>I worked on the PR: <a href="https://github.com/codezonediitj/pydatastructs/pull/556">#556</a></p> <p>Important commits include:</p> <ul> <li><a href="https://github.com/codezonediitj/pydatastructs/pull/556/commits/46a65cf9d96f2405bc901e649ac2b31afd8efc3a">C++ backend for Node class</a></li> <li><a href="https://github.com/codezonediitj/pydatastructs/pull/556/commits/da8fb74b5443c5ae7867d5cdbf473b073597e8e7">C++ backend for TreeNode class</a></li> <li><a href="https://github.com/codezonediitj/pydatastructs/pull/556/commits/0665403a539f00d533df86458abccb60e654193d">C++ backend for ArrayForTrees class</a></li> </ul> <p>There have been a large number of commits, these involve addition of C++ backend for Node class, TreeNode class (which has Node as it’s base class) and ArrayForTrees class (which has DynamicOneDimensionalArray as it’s base class). Other commits fix errors and segfaults encountered and have code quality corrections.</p> <p>Here is the progress tracker for the next few weeks: <a href="https://github.com/codezonediitj/pydatastructs/issues/554">#554</a></p> <p>In the following week, I will test all the code in this PR. It will be tested against the existing test cases and I will add more tests, covering edge cases that might occur. I will also add code to redirect control to this C++ backend (from Python), when the necessary backend parameter is passed.</p> <h3 id="learningsdifficulties"><ins>Learnings/Difficulties</ins></h3> <p>I learned how to define the “parent class and child class” structure in Python-C API, inheritance from the super class and making objects of a class using Python-C API.</p> <p><br/> I am grateful to my mentor, <a href="https://github.com/czgdp1807">Gagandeep Singh</a>, for encouraging me and resolving the issues I faced.</p> <p>See you next week with more updates! :)</p>]]></content><author><name></name></author><category term="Weekly_Blogs"/><category term="GSoC&apos;24"/><summary type="html"><![CDATA[C++ backend for Node, TreeNode and ArrayForTrees]]></summary></entry><entry><title type="html">GSoC’24 Week 1</title><link href="https://kishanved.tech//blog/week1" rel="alternate" type="text/html" title="GSoC’24 Week 1"/><published>2024-05-12T00:00:00+00:00</published><updated>2024-05-12T00:00:00+00:00</updated><id>https://kishanved.tech//blog/week1</id><content type="html" xml:base="https://kishanved.tech//blog/week1"><![CDATA[<h5 id="may-5---may-12"><code class="language-plaintext highlighter-rouge">[May 5 - May 12]</code></h5> <h2 id="c-backend-for-binary-trees-and-setting-up-the-repo-for-building-my-code-correctly">C++ backend for Binary Trees and setting up the repo for building my code correctly</h2> <hr/> <h3 id="getting-started"><ins>Getting started</ins></h3> <p>This week was all about getting familiarized with Python-C API, the thing I will be using for my project in GSoC 2024. I started by reading some blogs about extending Python with C++, making a class object structure and referred to the documentation for examples, reference code and necessary functions.</p> <p>I started writing some basic code for Binary Trees and got myself familiarized with the structure and logic followed in the Python implementation of the same. Moreover, this week’s work also involved knowing how to correctly build the library for development, writing scripts and placing code files at the perfect location.</p> <h3 id="relevant-prs"><ins>Relevant PRs:</ins></h3> <p>The following PR was merged: <a href="https://github.com/codezonediitj/pydatastructs/pull/553">#553</a></p> <p>This PR successfully solved and closed the issue: <a href="https://github.com/codezonediitj/pydatastructs/issues/552">#552</a></p> <p>I also worked on the PR: <a href="https://github.com/codezonediitj/pydatastructs/pull/556">#556</a></p> <p>I created a prototype for binary trees in this commit (which is intentionally changed in the PR later): <a href="https://github.com/codezonediitj/pydatastructs/pull/556/commits/2e8edc2079ce2ef9fa88de856c1eebda5988e4a5">Prototype commit for Binary Trees</a></p> <p>As mentioned above, I made another commit to overwrite that commit. This commit aligns the structure with the Python implementation of Binary Trees: <a href="https://github.com/codezonediitj/pydatastructs/pull/556/commits/2a78d84b5289a2dbdc3af3c6bff9ff97e31ff5e2">Binary Trees</a></p> <p>Here is the progress tracker for the next few weeks: <a href="https://github.com/codezonediitj/pydatastructs/issues/554">#554</a></p> <p>This is going to be a long PR with a lot more work to do. In the coming week, I will add C++ backend for Classes like Node, TreeNode and ArrayForTrees.</p> <h3 id="learningsdifficulties"><ins>Learnings/Difficulties</ins></h3> <p>I learned how to extend Python with C++, which boosts the speed and functionality. Being a beginner in Python-C API, I understood how to manage references, allocate and deallocate memory for members and write good stuctured code following principles of object oriented programming.</p> <p>I faced a few import errors while building (mostly because some script was missing or the code was not at the proper position), but in the end, all were successfully solved.</p> <p><br/></p> <p>Thanks to my mentor: <a href="https://github.com/czgdp1807">Gagandeep Singh</a>, for helping me get started and guiding me.</p> <p>See you next week with more progress! :)</p>]]></content><author><name></name></author><category term="Weekly_Blogs"/><category term="GSoC&apos;24"/><summary type="html"><![CDATA[C++ backend for Binary Trees and setting up the repo for building my code correctly]]></summary></entry></feed>